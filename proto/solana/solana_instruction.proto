syntax = "proto3";

package solana;

option go_package = "types/solana";

// `SolanaInstruction` represents a Solana instruction for cross-chain execution
message SolanaInstruction {
    // Target Solana program ID (32 bytes)
    bytes program_id = 1;

    // ALL accounts that will be accessed during execution
    repeated SolanaAccountMeta accounts = 2;

    // Instruction data
    bytes data = 3;

    // Optional: Position to inject relayer payer account for rent payment (0-indexed)
    //
    // - If not set: No payer injection (use for programs that don't create accounts)
    // - If set to N: Inject payer at index N in the final account list
    //
    // Example: `payer_position=2` means payer will be at index 2 in the accounts array.
    // The relayer's fee payer will be inserted at this position as a signer.
    optional uint32 payer_position = 4;
}

// `SolanaAccountMeta` represents account metadata for Solana instructions.
//
// Note: `is_signer` indicates whether the account should be a signer at the CPI instruction level.
// PDAs are marked `is_signer=true` even though they don't sign at the transaction level.
message SolanaAccountMeta {
    // Account public key (32 bytes)
    bytes pubkey = 1;

    // Should this account be a signer in the instruction?
    //
    // For PDAs: true (signs via `invoke_signed` during CPI)
    // For regular accounts: false (doesn't sign)
    bool is_signer = 2;

    // Will this account be modified?
    bool is_writable = 3;
}