// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package ics07_tendermint

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
)

type Ics07TendermintStateConsensusStateStore struct {
	Height         uint64                             `json:"height"`
	ConsensusState Ics07TendermintTypesConsensusState `json:"consensusState"`
}

func (obj Ics07TendermintStateConsensusStateStore) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Height`:
	err = encoder.Encode(obj.Height)
	if err != nil {
		return errors.NewField("Height", err)
	}
	// Serialize `ConsensusState`:
	err = encoder.Encode(obj.ConsensusState)
	if err != nil {
		return errors.NewField("ConsensusState", err)
	}
	return nil
}

func (obj Ics07TendermintStateConsensusStateStore) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics07TendermintStateConsensusStateStore: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics07TendermintStateConsensusStateStore) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Height`:
	err = decoder.Decode(&obj.Height)
	if err != nil {
		return errors.NewField("Height", err)
	}
	// Deserialize `ConsensusState`:
	err = decoder.Decode(&obj.ConsensusState)
	if err != nil {
		return errors.NewField("ConsensusState", err)
	}
	return nil
}

func (obj *Ics07TendermintStateConsensusStateStore) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics07TendermintStateConsensusStateStore: %w", err)
	}
	return nil
}

func UnmarshalIcs07TendermintStateConsensusStateStore(buf []byte) (*Ics07TendermintStateConsensusStateStore, error) {
	obj := new(Ics07TendermintStateConsensusStateStore)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Storage for a single chunk of header data during multi-transaction upload
type Ics07TendermintStateHeaderChunk struct {
	// The chunk data
	ChunkData []byte `json:"chunkData"`
}

func (obj Ics07TendermintStateHeaderChunk) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ChunkData`:
	err = encoder.Encode(obj.ChunkData)
	if err != nil {
		return errors.NewField("ChunkData", err)
	}
	return nil
}

func (obj Ics07TendermintStateHeaderChunk) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics07TendermintStateHeaderChunk: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics07TendermintStateHeaderChunk) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ChunkData`:
	err = decoder.Decode(&obj.ChunkData)
	if err != nil {
		return errors.NewField("ChunkData", err)
	}
	return nil
}

func (obj *Ics07TendermintStateHeaderChunk) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics07TendermintStateHeaderChunk: %w", err)
	}
	return nil
}

func UnmarshalIcs07TendermintStateHeaderChunk(buf []byte) (*Ics07TendermintStateHeaderChunk, error) {
	obj := new(Ics07TendermintStateHeaderChunk)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Ics07TendermintTypesClientState struct {
	ChainId               string                        `json:"chainId"`
	TrustLevelNumerator   uint64                        `json:"trustLevelNumerator"`
	TrustLevelDenominator uint64                        `json:"trustLevelDenominator"`
	TrustingPeriod        uint64                        `json:"trustingPeriod"`
	UnbondingPeriod       uint64                        `json:"unbondingPeriod"`
	MaxClockDrift         uint64                        `json:"maxClockDrift"`
	FrozenHeight          Ics07TendermintTypesIbcHeight `json:"frozenHeight"`
	LatestHeight          Ics07TendermintTypesIbcHeight `json:"latestHeight"`

	// Sorted list of consensus state heights we're tracking (ascending order, FIFO)
	// When this list reaches `MAX_CONSENSUS_STATE_HEIGHTS`, the oldest height is removed
	ConsensusStateHeights []uint64 `json:"consensusStateHeights"`

	// Heights that were removed from tracking and whose accounts should be closed to reclaim rent
	// These can be cleaned up via the `cleanup_consensus_states` instruction
	// Can accumulate up to 200 heights if cleanup is delayed
	ConsensusStateHeightsToPrune []uint64 `json:"consensusStateHeightsToPrune"`
}

func (obj Ics07TendermintTypesClientState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ChainId`:
	err = encoder.Encode(obj.ChainId)
	if err != nil {
		return errors.NewField("ChainId", err)
	}
	// Serialize `TrustLevelNumerator`:
	err = encoder.Encode(obj.TrustLevelNumerator)
	if err != nil {
		return errors.NewField("TrustLevelNumerator", err)
	}
	// Serialize `TrustLevelDenominator`:
	err = encoder.Encode(obj.TrustLevelDenominator)
	if err != nil {
		return errors.NewField("TrustLevelDenominator", err)
	}
	// Serialize `TrustingPeriod`:
	err = encoder.Encode(obj.TrustingPeriod)
	if err != nil {
		return errors.NewField("TrustingPeriod", err)
	}
	// Serialize `UnbondingPeriod`:
	err = encoder.Encode(obj.UnbondingPeriod)
	if err != nil {
		return errors.NewField("UnbondingPeriod", err)
	}
	// Serialize `MaxClockDrift`:
	err = encoder.Encode(obj.MaxClockDrift)
	if err != nil {
		return errors.NewField("MaxClockDrift", err)
	}
	// Serialize `FrozenHeight`:
	err = encoder.Encode(obj.FrozenHeight)
	if err != nil {
		return errors.NewField("FrozenHeight", err)
	}
	// Serialize `LatestHeight`:
	err = encoder.Encode(obj.LatestHeight)
	if err != nil {
		return errors.NewField("LatestHeight", err)
	}
	// Serialize `ConsensusStateHeights`:
	err = encoder.Encode(obj.ConsensusStateHeights)
	if err != nil {
		return errors.NewField("ConsensusStateHeights", err)
	}
	// Serialize `ConsensusStateHeightsToPrune`:
	err = encoder.Encode(obj.ConsensusStateHeightsToPrune)
	if err != nil {
		return errors.NewField("ConsensusStateHeightsToPrune", err)
	}
	return nil
}

func (obj Ics07TendermintTypesClientState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics07TendermintTypesClientState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics07TendermintTypesClientState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ChainId`:
	err = decoder.Decode(&obj.ChainId)
	if err != nil {
		return errors.NewField("ChainId", err)
	}
	// Deserialize `TrustLevelNumerator`:
	err = decoder.Decode(&obj.TrustLevelNumerator)
	if err != nil {
		return errors.NewField("TrustLevelNumerator", err)
	}
	// Deserialize `TrustLevelDenominator`:
	err = decoder.Decode(&obj.TrustLevelDenominator)
	if err != nil {
		return errors.NewField("TrustLevelDenominator", err)
	}
	// Deserialize `TrustingPeriod`:
	err = decoder.Decode(&obj.TrustingPeriod)
	if err != nil {
		return errors.NewField("TrustingPeriod", err)
	}
	// Deserialize `UnbondingPeriod`:
	err = decoder.Decode(&obj.UnbondingPeriod)
	if err != nil {
		return errors.NewField("UnbondingPeriod", err)
	}
	// Deserialize `MaxClockDrift`:
	err = decoder.Decode(&obj.MaxClockDrift)
	if err != nil {
		return errors.NewField("MaxClockDrift", err)
	}
	// Deserialize `FrozenHeight`:
	err = decoder.Decode(&obj.FrozenHeight)
	if err != nil {
		return errors.NewField("FrozenHeight", err)
	}
	// Deserialize `LatestHeight`:
	err = decoder.Decode(&obj.LatestHeight)
	if err != nil {
		return errors.NewField("LatestHeight", err)
	}
	// Deserialize `ConsensusStateHeights`:
	err = decoder.Decode(&obj.ConsensusStateHeights)
	if err != nil {
		return errors.NewField("ConsensusStateHeights", err)
	}
	// Deserialize `ConsensusStateHeightsToPrune`:
	err = decoder.Decode(&obj.ConsensusStateHeightsToPrune)
	if err != nil {
		return errors.NewField("ConsensusStateHeightsToPrune", err)
	}
	return nil
}

func (obj *Ics07TendermintTypesClientState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics07TendermintTypesClientState: %w", err)
	}
	return nil
}

func UnmarshalIcs07TendermintTypesClientState(buf []byte) (*Ics07TendermintTypesClientState, error) {
	obj := new(Ics07TendermintTypesClientState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Ics07TendermintTypesConsensusState struct {
	Timestamp          uint64    `json:"timestamp"`
	Root               [32]uint8 `json:"root"`
	NextValidatorsHash [32]uint8 `json:"nextValidatorsHash"`
}

func (obj Ics07TendermintTypesConsensusState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Timestamp`:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	// Serialize `Root`:
	err = encoder.Encode(obj.Root)
	if err != nil {
		return errors.NewField("Root", err)
	}
	// Serialize `NextValidatorsHash`:
	err = encoder.Encode(obj.NextValidatorsHash)
	if err != nil {
		return errors.NewField("NextValidatorsHash", err)
	}
	return nil
}

func (obj Ics07TendermintTypesConsensusState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics07TendermintTypesConsensusState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics07TendermintTypesConsensusState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	// Deserialize `Root`:
	err = decoder.Decode(&obj.Root)
	if err != nil {
		return errors.NewField("Root", err)
	}
	// Deserialize `NextValidatorsHash`:
	err = decoder.Decode(&obj.NextValidatorsHash)
	if err != nil {
		return errors.NewField("NextValidatorsHash", err)
	}
	return nil
}

func (obj *Ics07TendermintTypesConsensusState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics07TendermintTypesConsensusState: %w", err)
	}
	return nil
}

func UnmarshalIcs07TendermintTypesConsensusState(buf []byte) (*Ics07TendermintTypesConsensusState, error) {
	obj := new(Ics07TendermintTypesConsensusState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Ics07TendermintTypesIbcHeight struct {
	RevisionNumber uint64 `json:"revisionNumber"`
	RevisionHeight uint64 `json:"revisionHeight"`
}

func (obj Ics07TendermintTypesIbcHeight) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RevisionNumber`:
	err = encoder.Encode(obj.RevisionNumber)
	if err != nil {
		return errors.NewField("RevisionNumber", err)
	}
	// Serialize `RevisionHeight`:
	err = encoder.Encode(obj.RevisionHeight)
	if err != nil {
		return errors.NewField("RevisionHeight", err)
	}
	return nil
}

func (obj Ics07TendermintTypesIbcHeight) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics07TendermintTypesIbcHeight: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics07TendermintTypesIbcHeight) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RevisionNumber`:
	err = decoder.Decode(&obj.RevisionNumber)
	if err != nil {
		return errors.NewField("RevisionNumber", err)
	}
	// Deserialize `RevisionHeight`:
	err = decoder.Decode(&obj.RevisionHeight)
	if err != nil {
		return errors.NewField("RevisionHeight", err)
	}
	return nil
}

func (obj *Ics07TendermintTypesIbcHeight) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics07TendermintTypesIbcHeight: %w", err)
	}
	return nil
}

func UnmarshalIcs07TendermintTypesIbcHeight(buf []byte) (*Ics07TendermintTypesIbcHeight, error) {
	obj := new(Ics07TendermintTypesIbcHeight)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Ics07TendermintTypesMisbehaviourMsg struct {
	ClientId     string `json:"clientId"`
	Misbehaviour []byte `json:"misbehaviour"`
}

func (obj Ics07TendermintTypesMisbehaviourMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Misbehaviour`:
	err = encoder.Encode(obj.Misbehaviour)
	if err != nil {
		return errors.NewField("Misbehaviour", err)
	}
	return nil
}

func (obj Ics07TendermintTypesMisbehaviourMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics07TendermintTypesMisbehaviourMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics07TendermintTypesMisbehaviourMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Misbehaviour`:
	err = decoder.Decode(&obj.Misbehaviour)
	if err != nil {
		return errors.NewField("Misbehaviour", err)
	}
	return nil
}

func (obj *Ics07TendermintTypesMisbehaviourMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics07TendermintTypesMisbehaviourMsg: %w", err)
	}
	return nil
}

func UnmarshalIcs07TendermintTypesMisbehaviourMsg(buf []byte) (*Ics07TendermintTypesMisbehaviourMsg, error) {
	obj := new(Ics07TendermintTypesMisbehaviourMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type Ics07TendermintTypesUpdateResult binary.BorshEnum

const (
	Ics07TendermintTypesUpdateResult_Update Ics07TendermintTypesUpdateResult = iota
	Ics07TendermintTypesUpdateResult_NoOp
)

func (value Ics07TendermintTypesUpdateResult) String() string {
	switch value {
	case Ics07TendermintTypesUpdateResult_Update:
		return "Update"
	case Ics07TendermintTypesUpdateResult_NoOp:
		return "NoOp"
	default:
		return ""
	}
}

// Parameters for uploading a header chunk
type Ics07TendermintTypesUploadChunkParams struct {
	ChainId      string `json:"chainId"`
	TargetHeight uint64 `json:"targetHeight"`
	ChunkIndex   uint8  `json:"chunkIndex"`
	ChunkData    []byte `json:"chunkData"`
}

func (obj Ics07TendermintTypesUploadChunkParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ChainId`:
	err = encoder.Encode(obj.ChainId)
	if err != nil {
		return errors.NewField("ChainId", err)
	}
	// Serialize `TargetHeight`:
	err = encoder.Encode(obj.TargetHeight)
	if err != nil {
		return errors.NewField("TargetHeight", err)
	}
	// Serialize `ChunkIndex`:
	err = encoder.Encode(obj.ChunkIndex)
	if err != nil {
		return errors.NewField("ChunkIndex", err)
	}
	// Serialize `ChunkData`:
	err = encoder.Encode(obj.ChunkData)
	if err != nil {
		return errors.NewField("ChunkData", err)
	}
	return nil
}

func (obj Ics07TendermintTypesUploadChunkParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics07TendermintTypesUploadChunkParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics07TendermintTypesUploadChunkParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ChainId`:
	err = decoder.Decode(&obj.ChainId)
	if err != nil {
		return errors.NewField("ChainId", err)
	}
	// Deserialize `TargetHeight`:
	err = decoder.Decode(&obj.TargetHeight)
	if err != nil {
		return errors.NewField("TargetHeight", err)
	}
	// Deserialize `ChunkIndex`:
	err = decoder.Decode(&obj.ChunkIndex)
	if err != nil {
		return errors.NewField("ChunkIndex", err)
	}
	// Deserialize `ChunkData`:
	err = decoder.Decode(&obj.ChunkData)
	if err != nil {
		return errors.NewField("ChunkData", err)
	}
	return nil
}

func (obj *Ics07TendermintTypesUploadChunkParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics07TendermintTypesUploadChunkParams: %w", err)
	}
	return nil
}

func UnmarshalIcs07TendermintTypesUploadChunkParams(buf []byte) (*Ics07TendermintTypesUploadChunkParams, error) {
	obj := new(Ics07TendermintTypesUploadChunkParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Standard message structure for membership verification
// All light clients must accept this structure for both membership and non-membership proofs
type Ics25HandlerMembershipMsg struct {
	// The height at which to verify
	Height uint64 `json:"height"`

	// Delay time period (for time-based delays)
	DelayTimePeriod uint64 `json:"delayTimePeriod"`

	// Delay block period (for block-based delays)
	DelayBlockPeriod uint64 `json:"delayBlockPeriod"`

	// The merkle proof
	Proof []byte `json:"proof"`

	// The merkle path to the value
	Path [][]byte `json:"path"`

	// The value to verify (empty for non-membership)
	Value []byte `json:"value"`
}

func (obj Ics25HandlerMembershipMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Height`:
	err = encoder.Encode(obj.Height)
	if err != nil {
		return errors.NewField("Height", err)
	}
	// Serialize `DelayTimePeriod`:
	err = encoder.Encode(obj.DelayTimePeriod)
	if err != nil {
		return errors.NewField("DelayTimePeriod", err)
	}
	// Serialize `DelayBlockPeriod`:
	err = encoder.Encode(obj.DelayBlockPeriod)
	if err != nil {
		return errors.NewField("DelayBlockPeriod", err)
	}
	// Serialize `Proof`:
	err = encoder.Encode(obj.Proof)
	if err != nil {
		return errors.NewField("Proof", err)
	}
	// Serialize `Path`:
	err = encoder.Encode(obj.Path)
	if err != nil {
		return errors.NewField("Path", err)
	}
	// Serialize `Value`:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj Ics25HandlerMembershipMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics25HandlerMembershipMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics25HandlerMembershipMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Height`:
	err = decoder.Decode(&obj.Height)
	if err != nil {
		return errors.NewField("Height", err)
	}
	// Deserialize `DelayTimePeriod`:
	err = decoder.Decode(&obj.DelayTimePeriod)
	if err != nil {
		return errors.NewField("DelayTimePeriod", err)
	}
	// Deserialize `DelayBlockPeriod`:
	err = decoder.Decode(&obj.DelayBlockPeriod)
	if err != nil {
		return errors.NewField("DelayBlockPeriod", err)
	}
	// Deserialize `Proof`:
	err = decoder.Decode(&obj.Proof)
	if err != nil {
		return errors.NewField("Proof", err)
	}
	// Deserialize `Path`:
	err = decoder.Decode(&obj.Path)
	if err != nil {
		return errors.NewField("Path", err)
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj *Ics25HandlerMembershipMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics25HandlerMembershipMsg: %w", err)
	}
	return nil
}

func UnmarshalIcs25HandlerMembershipMsg(buf []byte) (*Ics25HandlerMembershipMsg, error) {
	obj := new(Ics25HandlerMembershipMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
