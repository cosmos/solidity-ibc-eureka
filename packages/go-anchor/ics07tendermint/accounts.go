// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the accounts defined in the IDL.

package ics07_tendermint

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyAccount(accountData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek account discriminator: %w", err)
	}
	switch discriminator {
	case Account_ClientState:
		value := new(ClientState)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as ClientState: %w", err)
		}
		return value, nil
	case Account_ConsensusStateStore:
		value := new(ConsensusStateStore)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as ConsensusStateStore: %w", err)
		}
		return value, nil
	case Account_HeaderChunk:
		value := new(HeaderChunk)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as HeaderChunk: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseAccount_ClientState(accountData []byte) (*ClientState, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_ClientState {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_ClientState, binary.FormatDiscriminator(discriminator))
	}
	acc := new(ClientState)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type ClientState: %w", err)
	}
	return acc, nil
}

func ParseAccount_ConsensusStateStore(accountData []byte) (*ConsensusStateStore, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_ConsensusStateStore {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_ConsensusStateStore, binary.FormatDiscriminator(discriminator))
	}
	acc := new(ConsensusStateStore)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type ConsensusStateStore: %w", err)
	}
	return acc, nil
}

func ParseAccount_HeaderChunk(accountData []byte) (*HeaderChunk, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_HeaderChunk {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_HeaderChunk, binary.FormatDiscriminator(discriminator))
	}
	acc := new(HeaderChunk)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type HeaderChunk: %w", err)
	}
	return acc, nil
}
