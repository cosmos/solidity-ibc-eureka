// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the accounts defined in the IDL.

package ics07_tendermint

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyAccount(accountData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek account discriminator: %w", err)
	}
	switch discriminator {
	case Account_Ics07TendermintStateConsensusStateStore:
		value := new(Ics07TendermintStateConsensusStateStore)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Ics07TendermintStateConsensusStateStore: %w", err)
		}
		return value, nil
	case Account_Ics07TendermintStateHeaderChunk:
		value := new(Ics07TendermintStateHeaderChunk)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Ics07TendermintStateHeaderChunk: %w", err)
		}
		return value, nil
	case Account_Ics07TendermintTypesClientState:
		value := new(Ics07TendermintTypesClientState)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Ics07TendermintTypesClientState: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseAccount_Ics07TendermintStateConsensusStateStore(accountData []byte) (*Ics07TendermintStateConsensusStateStore, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Ics07TendermintStateConsensusStateStore {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Ics07TendermintStateConsensusStateStore, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Ics07TendermintStateConsensusStateStore)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Ics07TendermintStateConsensusStateStore: %w", err)
	}
	return acc, nil
}

func ParseAccount_Ics07TendermintStateHeaderChunk(accountData []byte) (*Ics07TendermintStateHeaderChunk, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Ics07TendermintStateHeaderChunk {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Ics07TendermintStateHeaderChunk, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Ics07TendermintStateHeaderChunk)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Ics07TendermintStateHeaderChunk: %w", err)
	}
	return acc, nil
}

func ParseAccount_Ics07TendermintTypesClientState(accountData []byte) (*Ics07TendermintTypesClientState, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Ics07TendermintTypesClientState {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Ics07TendermintTypesClientState, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Ics07TendermintTypesClientState)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Ics07TendermintTypesClientState: %w", err)
	}
	return acc, nil
}
