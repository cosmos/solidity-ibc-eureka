// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package ics27_gmp

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_GmpAccountCreated:
		value := new(GmpAccountCreated)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as GmpAccountCreated: %w", err)
		}
		return value, nil
	case Event_GmpAcknowledgementProcessed:
		value := new(GmpAcknowledgementProcessed)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as GmpAcknowledgementProcessed: %w", err)
		}
		return value, nil
	case Event_GmpAppInitialized:
		value := new(GmpAppInitialized)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as GmpAppInitialized: %w", err)
		}
		return value, nil
	case Event_GmpAppPaused:
		value := new(GmpAppPaused)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as GmpAppPaused: %w", err)
		}
		return value, nil
	case Event_GmpAppUnpaused:
		value := new(GmpAppUnpaused)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as GmpAppUnpaused: %w", err)
		}
		return value, nil
	case Event_GmpCallSent:
		value := new(GmpCallSent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as GmpCallSent: %w", err)
		}
		return value, nil
	case Event_GmpExecutionCompleted:
		value := new(GmpExecutionCompleted)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as GmpExecutionCompleted: %w", err)
		}
		return value, nil
	case Event_GmpExecutionFailed:
		value := new(GmpExecutionFailed)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as GmpExecutionFailed: %w", err)
		}
		return value, nil
	case Event_GmpTimeoutProcessed:
		value := new(GmpTimeoutProcessed)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as GmpTimeoutProcessed: %w", err)
		}
		return value, nil
	case Event_RouterCallerCreated:
		value := new(RouterCallerCreated)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as RouterCallerCreated: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_GmpAccountCreated(eventData []byte) (*GmpAccountCreated, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_GmpAccountCreated {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_GmpAccountCreated, binary.FormatDiscriminator(discriminator))
	}
	event := new(GmpAccountCreated)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type GmpAccountCreated: %w", err)
	}
	return event, nil
}

func ParseEvent_GmpAcknowledgementProcessed(eventData []byte) (*GmpAcknowledgementProcessed, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_GmpAcknowledgementProcessed {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_GmpAcknowledgementProcessed, binary.FormatDiscriminator(discriminator))
	}
	event := new(GmpAcknowledgementProcessed)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type GmpAcknowledgementProcessed: %w", err)
	}
	return event, nil
}

func ParseEvent_GmpAppInitialized(eventData []byte) (*GmpAppInitialized, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_GmpAppInitialized {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_GmpAppInitialized, binary.FormatDiscriminator(discriminator))
	}
	event := new(GmpAppInitialized)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type GmpAppInitialized: %w", err)
	}
	return event, nil
}

func ParseEvent_GmpAppPaused(eventData []byte) (*GmpAppPaused, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_GmpAppPaused {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_GmpAppPaused, binary.FormatDiscriminator(discriminator))
	}
	event := new(GmpAppPaused)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type GmpAppPaused: %w", err)
	}
	return event, nil
}

func ParseEvent_GmpAppUnpaused(eventData []byte) (*GmpAppUnpaused, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_GmpAppUnpaused {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_GmpAppUnpaused, binary.FormatDiscriminator(discriminator))
	}
	event := new(GmpAppUnpaused)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type GmpAppUnpaused: %w", err)
	}
	return event, nil
}

func ParseEvent_GmpCallSent(eventData []byte) (*GmpCallSent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_GmpCallSent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_GmpCallSent, binary.FormatDiscriminator(discriminator))
	}
	event := new(GmpCallSent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type GmpCallSent: %w", err)
	}
	return event, nil
}

func ParseEvent_GmpExecutionCompleted(eventData []byte) (*GmpExecutionCompleted, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_GmpExecutionCompleted {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_GmpExecutionCompleted, binary.FormatDiscriminator(discriminator))
	}
	event := new(GmpExecutionCompleted)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type GmpExecutionCompleted: %w", err)
	}
	return event, nil
}

func ParseEvent_GmpExecutionFailed(eventData []byte) (*GmpExecutionFailed, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_GmpExecutionFailed {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_GmpExecutionFailed, binary.FormatDiscriminator(discriminator))
	}
	event := new(GmpExecutionFailed)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type GmpExecutionFailed: %w", err)
	}
	return event, nil
}

func ParseEvent_GmpTimeoutProcessed(eventData []byte) (*GmpTimeoutProcessed, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_GmpTimeoutProcessed {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_GmpTimeoutProcessed, binary.FormatDiscriminator(discriminator))
	}
	event := new(GmpTimeoutProcessed)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type GmpTimeoutProcessed: %w", err)
	}
	return event, nil
}

func ParseEvent_RouterCallerCreated(eventData []byte) (*RouterCallerCreated, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_RouterCallerCreated {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_RouterCallerCreated, binary.FormatDiscriminator(discriminator))
	}
	event := new(RouterCallerCreated)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type RouterCallerCreated: %w", err)
	}
	return event, nil
}
