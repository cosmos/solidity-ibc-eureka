// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package ics27_gmp

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Event emitted when a new account is created
type GmpAccountCreated struct {
	// Account address (PDA)
	Account solanago.PublicKey `json:"account"`

	// Client ID
	ClientId string `json:"clientId"`

	// Original sender
	Sender string `json:"sender"`

	// Salt used for derivation
	Salt []byte `json:"salt"`

	// Creation timestamp
	CreatedAt int64 `json:"createdAt"`
}

func (obj GmpAccountCreated) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Account`:
	err = encoder.Encode(obj.Account)
	if err != nil {
		return errors.NewField("Account", err)
	}
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Sender`:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Serialize `Salt`:
	err = encoder.Encode(obj.Salt)
	if err != nil {
		return errors.NewField("Salt", err)
	}
	// Serialize `CreatedAt`:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return errors.NewField("CreatedAt", err)
	}
	return nil
}

func (obj GmpAccountCreated) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GmpAccountCreated: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GmpAccountCreated) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Account`:
	err = decoder.Decode(&obj.Account)
	if err != nil {
		return errors.NewField("Account", err)
	}
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Deserialize `Salt`:
	err = decoder.Decode(&obj.Salt)
	if err != nil {
		return errors.NewField("Salt", err)
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return errors.NewField("CreatedAt", err)
	}
	return nil
}

func (obj *GmpAccountCreated) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GmpAccountCreated: %w", err)
	}
	return nil
}

func UnmarshalGmpAccountCreated(buf []byte) (*GmpAccountCreated, error) {
	obj := new(GmpAccountCreated)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Event emitted when packet acknowledgement is processed
type GmpAcknowledgementProcessed struct {
	// Original sender
	Sender solanago.PublicKey `json:"sender"`

	// Packet sequence
	Sequence uint64 `json:"sequence"`

	// Whether acknowledgement indicates success
	AckSuccess bool `json:"ackSuccess"`

	// Processing timestamp
	Timestamp int64 `json:"timestamp"`
}

func (obj GmpAcknowledgementProcessed) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Sender`:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `AckSuccess`:
	err = encoder.Encode(obj.AckSuccess)
	if err != nil {
		return errors.NewField("AckSuccess", err)
	}
	// Serialize `Timestamp`:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj GmpAcknowledgementProcessed) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GmpAcknowledgementProcessed: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GmpAcknowledgementProcessed) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `AckSuccess`:
	err = decoder.Decode(&obj.AckSuccess)
	if err != nil {
		return errors.NewField("AckSuccess", err)
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj *GmpAcknowledgementProcessed) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GmpAcknowledgementProcessed: %w", err)
	}
	return nil
}

func UnmarshalGmpAcknowledgementProcessed(buf []byte) (*GmpAcknowledgementProcessed, error) {
	obj := new(GmpAcknowledgementProcessed)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Event emitted when GMP app is initialized
type GmpAppInitialized struct {
	// Router program managing this app
	RouterProgram solanago.PublicKey `json:"routerProgram"`

	// Administrative authority
	Authority solanago.PublicKey `json:"authority"`

	// Port ID bound to this app
	PortId string `json:"portId"`

	// App initialization timestamp
	Timestamp int64 `json:"timestamp"`
}

func (obj GmpAppInitialized) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RouterProgram`:
	err = encoder.Encode(obj.RouterProgram)
	if err != nil {
		return errors.NewField("RouterProgram", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `PortId`:
	err = encoder.Encode(obj.PortId)
	if err != nil {
		return errors.NewField("PortId", err)
	}
	// Serialize `Timestamp`:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj GmpAppInitialized) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GmpAppInitialized: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GmpAppInitialized) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RouterProgram`:
	err = decoder.Decode(&obj.RouterProgram)
	if err != nil {
		return errors.NewField("RouterProgram", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `PortId`:
	err = decoder.Decode(&obj.PortId)
	if err != nil {
		return errors.NewField("PortId", err)
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj *GmpAppInitialized) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GmpAppInitialized: %w", err)
	}
	return nil
}

func UnmarshalGmpAppInitialized(buf []byte) (*GmpAppInitialized, error) {
	obj := new(GmpAppInitialized)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Event emitted when app is paused
type GmpAppPaused struct {
	// Admin who paused the app
	Admin solanago.PublicKey `json:"admin"`

	// Pause timestamp
	Timestamp int64 `json:"timestamp"`
}

func (obj GmpAppPaused) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Admin`:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return errors.NewField("Admin", err)
	}
	// Serialize `Timestamp`:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj GmpAppPaused) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GmpAppPaused: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GmpAppPaused) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return errors.NewField("Admin", err)
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj *GmpAppPaused) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GmpAppPaused: %w", err)
	}
	return nil
}

func UnmarshalGmpAppPaused(buf []byte) (*GmpAppPaused, error) {
	obj := new(GmpAppPaused)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Main GMP application state
type GmpAppState struct {
	// ICS26 Router program that manages this app
	RouterProgram solanago.PublicKey `json:"routerProgram"`

	// Administrative authority
	Authority solanago.PublicKey `json:"authority"`

	// Program version for upgrades
	Version uint8 `json:"version"`

	// Emergency pause flag
	Paused bool `json:"paused"`

	// PDA bump seed
	Bump uint8 `json:"bump"`
}

func (obj GmpAppState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RouterProgram`:
	err = encoder.Encode(obj.RouterProgram)
	if err != nil {
		return errors.NewField("RouterProgram", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Paused`:
	err = encoder.Encode(obj.Paused)
	if err != nil {
		return errors.NewField("Paused", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj GmpAppState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GmpAppState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GmpAppState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RouterProgram`:
	err = decoder.Decode(&obj.RouterProgram)
	if err != nil {
		return errors.NewField("RouterProgram", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Paused`:
	err = decoder.Decode(&obj.Paused)
	if err != nil {
		return errors.NewField("Paused", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj *GmpAppState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GmpAppState: %w", err)
	}
	return nil
}

func UnmarshalGmpAppState(buf []byte) (*GmpAppState, error) {
	obj := new(GmpAppState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Event emitted when app is unpaused
type GmpAppUnpaused struct {
	// Admin who unpaused the app
	Admin solanago.PublicKey `json:"admin"`

	// Unpause timestamp
	Timestamp int64 `json:"timestamp"`
}

func (obj GmpAppUnpaused) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Admin`:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return errors.NewField("Admin", err)
	}
	// Serialize `Timestamp`:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj GmpAppUnpaused) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GmpAppUnpaused: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GmpAppUnpaused) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return errors.NewField("Admin", err)
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj *GmpAppUnpaused) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GmpAppUnpaused: %w", err)
	}
	return nil
}

func UnmarshalGmpAppUnpaused(buf []byte) (*GmpAppUnpaused, error) {
	obj := new(GmpAppUnpaused)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Event emitted when a GMP call is sent
type GmpCallSent struct {
	// Packet sequence number
	Sequence uint64 `json:"sequence"`

	// Sender of the call
	Sender solanago.PublicKey `json:"sender"`

	// Target program to execute
	Receiver solanago.PublicKey `json:"receiver"`

	// Source client ID
	ClientId string `json:"clientId"`

	// Account salt used
	Salt []byte `json:"salt"`

	// Payload size
	PayloadSize uint64 `json:"payloadSize"`

	// Timeout timestamp
	TimeoutTimestamp int64 `json:"timeoutTimestamp"`
}

func (obj GmpCallSent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `Sender`:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Serialize `Receiver`:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return errors.NewField("Receiver", err)
	}
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Salt`:
	err = encoder.Encode(obj.Salt)
	if err != nil {
		return errors.NewField("Salt", err)
	}
	// Serialize `PayloadSize`:
	err = encoder.Encode(obj.PayloadSize)
	if err != nil {
		return errors.NewField("PayloadSize", err)
	}
	// Serialize `TimeoutTimestamp`:
	err = encoder.Encode(obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	return nil
}

func (obj GmpCallSent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GmpCallSent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GmpCallSent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return errors.NewField("Receiver", err)
	}
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Salt`:
	err = decoder.Decode(&obj.Salt)
	if err != nil {
		return errors.NewField("Salt", err)
	}
	// Deserialize `PayloadSize`:
	err = decoder.Decode(&obj.PayloadSize)
	if err != nil {
		return errors.NewField("PayloadSize", err)
	}
	// Deserialize `TimeoutTimestamp`:
	err = decoder.Decode(&obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	return nil
}

func (obj *GmpCallSent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GmpCallSent: %w", err)
	}
	return nil
}

func UnmarshalGmpCallSent(buf []byte) (*GmpCallSent, error) {
	obj := new(GmpCallSent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Event emitted when a packet is received and executed
type GmpExecutionCompleted struct {
	// Account that executed the call
	Account solanago.PublicKey `json:"account"`

	// Target program that was called
	TargetProgram solanago.PublicKey `json:"targetProgram"`

	// Client ID
	ClientId string `json:"clientId"`

	// Original sender
	Sender string `json:"sender"`

	// Account nonce after execution
	Nonce uint64 `json:"nonce"`

	// Whether execution succeeded
	Success bool `json:"success"`

	// Result data size
	ResultSize uint64 `json:"resultSize"`

	// Execution timestamp
	Timestamp int64 `json:"timestamp"`
}

func (obj GmpExecutionCompleted) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Account`:
	err = encoder.Encode(obj.Account)
	if err != nil {
		return errors.NewField("Account", err)
	}
	// Serialize `TargetProgram`:
	err = encoder.Encode(obj.TargetProgram)
	if err != nil {
		return errors.NewField("TargetProgram", err)
	}
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Sender`:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Serialize `Nonce`:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return errors.NewField("Nonce", err)
	}
	// Serialize `Success`:
	err = encoder.Encode(obj.Success)
	if err != nil {
		return errors.NewField("Success", err)
	}
	// Serialize `ResultSize`:
	err = encoder.Encode(obj.ResultSize)
	if err != nil {
		return errors.NewField("ResultSize", err)
	}
	// Serialize `Timestamp`:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj GmpExecutionCompleted) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GmpExecutionCompleted: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GmpExecutionCompleted) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Account`:
	err = decoder.Decode(&obj.Account)
	if err != nil {
		return errors.NewField("Account", err)
	}
	// Deserialize `TargetProgram`:
	err = decoder.Decode(&obj.TargetProgram)
	if err != nil {
		return errors.NewField("TargetProgram", err)
	}
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return errors.NewField("Nonce", err)
	}
	// Deserialize `Success`:
	err = decoder.Decode(&obj.Success)
	if err != nil {
		return errors.NewField("Success", err)
	}
	// Deserialize `ResultSize`:
	err = decoder.Decode(&obj.ResultSize)
	if err != nil {
		return errors.NewField("ResultSize", err)
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj *GmpExecutionCompleted) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GmpExecutionCompleted: %w", err)
	}
	return nil
}

func UnmarshalGmpExecutionCompleted(buf []byte) (*GmpExecutionCompleted, error) {
	obj := new(GmpExecutionCompleted)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Event emitted for execution failures
type GmpExecutionFailed struct {
	// Account that failed execution
	Account solanago.PublicKey `json:"account"`

	// Target program that failed
	TargetProgram solanago.PublicKey `json:"targetProgram"`

	// Error code
	ErrorCode uint32 `json:"errorCode"`

	// Error message
	ErrorMessage string `json:"errorMessage"`

	// Failure timestamp
	Timestamp int64 `json:"timestamp"`
}

func (obj GmpExecutionFailed) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Account`:
	err = encoder.Encode(obj.Account)
	if err != nil {
		return errors.NewField("Account", err)
	}
	// Serialize `TargetProgram`:
	err = encoder.Encode(obj.TargetProgram)
	if err != nil {
		return errors.NewField("TargetProgram", err)
	}
	// Serialize `ErrorCode`:
	err = encoder.Encode(obj.ErrorCode)
	if err != nil {
		return errors.NewField("ErrorCode", err)
	}
	// Serialize `ErrorMessage`:
	err = encoder.Encode(obj.ErrorMessage)
	if err != nil {
		return errors.NewField("ErrorMessage", err)
	}
	// Serialize `Timestamp`:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj GmpExecutionFailed) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GmpExecutionFailed: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GmpExecutionFailed) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Account`:
	err = decoder.Decode(&obj.Account)
	if err != nil {
		return errors.NewField("Account", err)
	}
	// Deserialize `TargetProgram`:
	err = decoder.Decode(&obj.TargetProgram)
	if err != nil {
		return errors.NewField("TargetProgram", err)
	}
	// Deserialize `ErrorCode`:
	err = decoder.Decode(&obj.ErrorCode)
	if err != nil {
		return errors.NewField("ErrorCode", err)
	}
	// Deserialize `ErrorMessage`:
	err = decoder.Decode(&obj.ErrorMessage)
	if err != nil {
		return errors.NewField("ErrorMessage", err)
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj *GmpExecutionFailed) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GmpExecutionFailed: %w", err)
	}
	return nil
}

func UnmarshalGmpExecutionFailed(buf []byte) (*GmpExecutionFailed, error) {
	obj := new(GmpExecutionFailed)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Event emitted when packet timeout is processed
type GmpTimeoutProcessed struct {
	// Original sender
	Sender solanago.PublicKey `json:"sender"`

	// Packet sequence
	Sequence uint64 `json:"sequence"`

	// Timeout height or timestamp
	TimeoutInfo string `json:"timeoutInfo"`

	// Processing timestamp
	Timestamp int64 `json:"timestamp"`
}

func (obj GmpTimeoutProcessed) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Sender`:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `TimeoutInfo`:
	err = encoder.Encode(obj.TimeoutInfo)
	if err != nil {
		return errors.NewField("TimeoutInfo", err)
	}
	// Serialize `Timestamp`:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj GmpTimeoutProcessed) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GmpTimeoutProcessed: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GmpTimeoutProcessed) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `TimeoutInfo`:
	err = decoder.Decode(&obj.TimeoutInfo)
	if err != nil {
		return errors.NewField("TimeoutInfo", err)
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return errors.NewField("Timestamp", err)
	}
	return nil
}

func (obj *GmpTimeoutProcessed) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GmpTimeoutProcessed: %w", err)
	}
	return nil
}

func UnmarshalGmpTimeoutProcessed(buf []byte) (*GmpTimeoutProcessed, error) {
	obj := new(GmpTimeoutProcessed)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for onAcknowledgementPacket callback
// Sent from router to IBC app when an acknowledgement is received
type OnAcknowledgementPacketMsg struct {
	SourceClient    string             `json:"sourceClient"`
	DestClient      string             `json:"destClient"`
	Sequence        uint64             `json:"sequence"`
	Payload         Payload            `json:"payload"`
	Acknowledgement []byte             `json:"acknowledgement"`
	Relayer         solanago.PublicKey `json:"relayer"`
}

func (obj OnAcknowledgementPacketMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `DestClient`:
	err = encoder.Encode(obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `Payload`:
	err = encoder.Encode(obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Serialize `Acknowledgement`:
	err = encoder.Encode(obj.Acknowledgement)
	if err != nil {
		return errors.NewField("Acknowledgement", err)
	}
	// Serialize `Relayer`:
	err = encoder.Encode(obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj OnAcknowledgementPacketMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OnAcknowledgementPacketMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OnAcknowledgementPacketMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `DestClient`:
	err = decoder.Decode(&obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `Payload`:
	err = decoder.Decode(&obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Deserialize `Acknowledgement`:
	err = decoder.Decode(&obj.Acknowledgement)
	if err != nil {
		return errors.NewField("Acknowledgement", err)
	}
	// Deserialize `Relayer`:
	err = decoder.Decode(&obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj *OnAcknowledgementPacketMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OnAcknowledgementPacketMsg: %w", err)
	}
	return nil
}

func UnmarshalOnAcknowledgementPacketMsg(buf []byte) (*OnAcknowledgementPacketMsg, error) {
	obj := new(OnAcknowledgementPacketMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for onRecvPacket callback
// Sent from router to IBC app when a packet is received
type OnRecvPacketMsg struct {
	SourceClient string             `json:"sourceClient"`
	DestClient   string             `json:"destClient"`
	Sequence     uint64             `json:"sequence"`
	Payload      Payload            `json:"payload"`
	Relayer      solanago.PublicKey `json:"relayer"`
}

func (obj OnRecvPacketMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `DestClient`:
	err = encoder.Encode(obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `Payload`:
	err = encoder.Encode(obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Serialize `Relayer`:
	err = encoder.Encode(obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj OnRecvPacketMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OnRecvPacketMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OnRecvPacketMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `DestClient`:
	err = decoder.Decode(&obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `Payload`:
	err = decoder.Decode(&obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Deserialize `Relayer`:
	err = decoder.Decode(&obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj *OnRecvPacketMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OnRecvPacketMsg: %w", err)
	}
	return nil
}

func UnmarshalOnRecvPacketMsg(buf []byte) (*OnRecvPacketMsg, error) {
	obj := new(OnRecvPacketMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for onTimeoutPacket callback
// Sent from router to IBC app when a packet times out
type OnTimeoutPacketMsg struct {
	SourceClient string             `json:"sourceClient"`
	DestClient   string             `json:"destClient"`
	Sequence     uint64             `json:"sequence"`
	Payload      Payload            `json:"payload"`
	Relayer      solanago.PublicKey `json:"relayer"`
}

func (obj OnTimeoutPacketMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `DestClient`:
	err = encoder.Encode(obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `Payload`:
	err = encoder.Encode(obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Serialize `Relayer`:
	err = encoder.Encode(obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj OnTimeoutPacketMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding OnTimeoutPacketMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *OnTimeoutPacketMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `DestClient`:
	err = decoder.Decode(&obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `Payload`:
	err = decoder.Decode(&obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Deserialize `Relayer`:
	err = decoder.Decode(&obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj *OnTimeoutPacketMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling OnTimeoutPacketMsg: %w", err)
	}
	return nil
}

func UnmarshalOnTimeoutPacketMsg(buf []byte) (*OnTimeoutPacketMsg, error) {
	obj := new(OnTimeoutPacketMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Payload structure shared between router and IBC apps
type Payload struct {
	SourcePort string `json:"sourcePort"`
	DestPort   string `json:"destPort"`
	Version    string `json:"version"`
	Encoding   string `json:"encoding"`
	Value      []byte `json:"value"`
}

func (obj Payload) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourcePort`:
	err = encoder.Encode(obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Serialize `DestPort`:
	err = encoder.Encode(obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Encoding`:
	err = encoder.Encode(obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Serialize `Value`:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj Payload) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Payload: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Payload) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourcePort`:
	err = decoder.Decode(&obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Deserialize `DestPort`:
	err = decoder.Decode(&obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Encoding`:
	err = decoder.Decode(&obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj *Payload) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Payload: %w", err)
	}
	return nil
}

func UnmarshalPayload(buf []byte) (*Payload, error) {
	obj := new(Payload)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Event emitted when router caller PDA is created
type RouterCallerCreated struct {
	// Router caller PDA address
	RouterCaller solanago.PublicKey `json:"routerCaller"`

	// PDA bump seed
	Bump uint8 `json:"bump"`
}

func (obj RouterCallerCreated) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RouterCaller`:
	err = encoder.Encode(obj.RouterCaller)
	if err != nil {
		return errors.NewField("RouterCaller", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj RouterCallerCreated) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RouterCallerCreated: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RouterCallerCreated) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RouterCaller`:
	err = decoder.Decode(&obj.RouterCaller)
	if err != nil {
		return errors.NewField("RouterCaller", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj *RouterCallerCreated) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RouterCallerCreated: %w", err)
	}
	return nil
}

func UnmarshalRouterCallerCreated(buf []byte) (*RouterCallerCreated, error) {
	obj := new(RouterCallerCreated)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Send call message
type SendCallMsg struct {
	// Source client identifier
	SourceClient string `json:"sourceClient"`

	// Timeout timestamp (unix seconds)
	TimeoutTimestamp int64 `json:"timeoutTimestamp"`

	// Receiver program
	Receiver solanago.PublicKey `json:"receiver"`

	// Account salt
	Salt []byte `json:"salt"`

	// Call payload (instruction data + accounts)
	Payload []byte `json:"payload"`

	// Optional memo
	Memo string `json:"memo"`
}

func (obj SendCallMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `TimeoutTimestamp`:
	err = encoder.Encode(obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Serialize `Receiver`:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return errors.NewField("Receiver", err)
	}
	// Serialize `Salt`:
	err = encoder.Encode(obj.Salt)
	if err != nil {
		return errors.NewField("Salt", err)
	}
	// Serialize `Payload`:
	err = encoder.Encode(obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Serialize `Memo`:
	err = encoder.Encode(obj.Memo)
	if err != nil {
		return errors.NewField("Memo", err)
	}
	return nil
}

func (obj SendCallMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SendCallMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SendCallMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `TimeoutTimestamp`:
	err = decoder.Decode(&obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return errors.NewField("Receiver", err)
	}
	// Deserialize `Salt`:
	err = decoder.Decode(&obj.Salt)
	if err != nil {
		return errors.NewField("Salt", err)
	}
	// Deserialize `Payload`:
	err = decoder.Decode(&obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Deserialize `Memo`:
	err = decoder.Decode(&obj.Memo)
	if err != nil {
		return errors.NewField("Memo", err)
	}
	return nil
}

func (obj *SendCallMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SendCallMsg: %w", err)
	}
	return nil
}

func UnmarshalSendCallMsg(buf []byte) (*SendCallMsg, error) {
	obj := new(SendCallMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
