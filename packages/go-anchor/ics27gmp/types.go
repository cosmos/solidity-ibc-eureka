// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package ics27_gmp

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Individual account state managed as PDAs
type Ics27GmpStateAccountState struct {
	// Client ID that created this account
	ClientId string `json:"clientId"`

	// Original sender (checksummed hex address from source chain)
	Sender string `json:"sender"`

	// Salt for unique account generation
	Salt []byte `json:"salt"`

	// Execution nonce for replay protection
	Nonce uint64 `json:"nonce"`

	// Account creation timestamp
	CreatedAt int64 `json:"createdAt"`

	// Last execution timestamp
	LastExecutedAt int64 `json:"lastExecutedAt"`

	// Total successful executions
	ExecutionCount uint64 `json:"executionCount"`

	// PDA bump seed
	Bump uint8 `json:"bump"`
}

func (obj Ics27GmpStateAccountState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Sender`:
	err = encoder.Encode(obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Serialize `Salt`:
	err = encoder.Encode(obj.Salt)
	if err != nil {
		return errors.NewField("Salt", err)
	}
	// Serialize `Nonce`:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return errors.NewField("Nonce", err)
	}
	// Serialize `CreatedAt`:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return errors.NewField("CreatedAt", err)
	}
	// Serialize `LastExecutedAt`:
	err = encoder.Encode(obj.LastExecutedAt)
	if err != nil {
		return errors.NewField("LastExecutedAt", err)
	}
	// Serialize `ExecutionCount`:
	err = encoder.Encode(obj.ExecutionCount)
	if err != nil {
		return errors.NewField("ExecutionCount", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj Ics27GmpStateAccountState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics27GmpStateAccountState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics27GmpStateAccountState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Sender`:
	err = decoder.Decode(&obj.Sender)
	if err != nil {
		return errors.NewField("Sender", err)
	}
	// Deserialize `Salt`:
	err = decoder.Decode(&obj.Salt)
	if err != nil {
		return errors.NewField("Salt", err)
	}
	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return errors.NewField("Nonce", err)
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return errors.NewField("CreatedAt", err)
	}
	// Deserialize `LastExecutedAt`:
	err = decoder.Decode(&obj.LastExecutedAt)
	if err != nil {
		return errors.NewField("LastExecutedAt", err)
	}
	// Deserialize `ExecutionCount`:
	err = decoder.Decode(&obj.ExecutionCount)
	if err != nil {
		return errors.NewField("ExecutionCount", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj *Ics27GmpStateAccountState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics27GmpStateAccountState: %w", err)
	}
	return nil
}

func UnmarshalIcs27GmpStateAccountState(buf []byte) (*Ics27GmpStateAccountState, error) {
	obj := new(Ics27GmpStateAccountState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Main GMP application state
type Ics27GmpStateGmpAppState struct {
	// ICS26 Router program that manages this app
	RouterProgram solanago.PublicKey `json:"routerProgram"`

	// Administrative authority
	Authority solanago.PublicKey `json:"authority"`

	// Program version for upgrades
	Version uint8 `json:"version"`

	// Emergency pause flag
	Paused bool `json:"paused"`

	// PDA bump seed
	Bump uint8 `json:"bump"`
}

func (obj Ics27GmpStateGmpAppState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `RouterProgram`:
	err = encoder.Encode(obj.RouterProgram)
	if err != nil {
		return errors.NewField("RouterProgram", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Paused`:
	err = encoder.Encode(obj.Paused)
	if err != nil {
		return errors.NewField("Paused", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj Ics27GmpStateGmpAppState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics27GmpStateGmpAppState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics27GmpStateGmpAppState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `RouterProgram`:
	err = decoder.Decode(&obj.RouterProgram)
	if err != nil {
		return errors.NewField("RouterProgram", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Paused`:
	err = decoder.Decode(&obj.Paused)
	if err != nil {
		return errors.NewField("Paused", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj *Ics27GmpStateGmpAppState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics27GmpStateGmpAppState: %w", err)
	}
	return nil
}

func UnmarshalIcs27GmpStateGmpAppState(buf []byte) (*Ics27GmpStateGmpAppState, error) {
	obj := new(Ics27GmpStateGmpAppState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Send call message
type Ics27GmpStateSendCallMsg struct {
	// Source client identifier
	SourceClient string `json:"sourceClient"`

	// Timeout timestamp (unix seconds)
	TimeoutTimestamp int64 `json:"timeoutTimestamp"`

	// Receiver program
	Receiver solanago.PublicKey `json:"receiver"`

	// Account salt
	Salt []byte `json:"salt"`

	// Call payload (instruction data + accounts)
	Payload []byte `json:"payload"`

	// Optional memo
	Memo string `json:"memo"`
}

func (obj Ics27GmpStateSendCallMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `TimeoutTimestamp`:
	err = encoder.Encode(obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Serialize `Receiver`:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return errors.NewField("Receiver", err)
	}
	// Serialize `Salt`:
	err = encoder.Encode(obj.Salt)
	if err != nil {
		return errors.NewField("Salt", err)
	}
	// Serialize `Payload`:
	err = encoder.Encode(obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Serialize `Memo`:
	err = encoder.Encode(obj.Memo)
	if err != nil {
		return errors.NewField("Memo", err)
	}
	return nil
}

func (obj Ics27GmpStateSendCallMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics27GmpStateSendCallMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics27GmpStateSendCallMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `TimeoutTimestamp`:
	err = decoder.Decode(&obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return errors.NewField("Receiver", err)
	}
	// Deserialize `Salt`:
	err = decoder.Decode(&obj.Salt)
	if err != nil {
		return errors.NewField("Salt", err)
	}
	// Deserialize `Payload`:
	err = decoder.Decode(&obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Deserialize `Memo`:
	err = decoder.Decode(&obj.Memo)
	if err != nil {
		return errors.NewField("Memo", err)
	}
	return nil
}

func (obj *Ics27GmpStateSendCallMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics27GmpStateSendCallMsg: %w", err)
	}
	return nil
}

func UnmarshalIcs27GmpStateSendCallMsg(buf []byte) (*Ics27GmpStateSendCallMsg, error) {
	obj := new(Ics27GmpStateSendCallMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for onAcknowledgementPacket callback
// Sent from router to IBC app when an acknowledgement is received
type SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg struct {
	SourceClient    string                       `json:"sourceClient"`
	DestClient      string                       `json:"destClient"`
	Sequence        uint64                       `json:"sequence"`
	Payload         SolanaIbcTypesAppMsgsPayload `json:"payload"`
	Acknowledgement []byte                       `json:"acknowledgement"`
	Relayer         solanago.PublicKey           `json:"relayer"`
}

func (obj SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `DestClient`:
	err = encoder.Encode(obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `Payload`:
	err = encoder.Encode(obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Serialize `Acknowledgement`:
	err = encoder.Encode(obj.Acknowledgement)
	if err != nil {
		return errors.NewField("Acknowledgement", err)
	}
	// Serialize `Relayer`:
	err = encoder.Encode(obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `DestClient`:
	err = decoder.Decode(&obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `Payload`:
	err = decoder.Decode(&obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Deserialize `Acknowledgement`:
	err = decoder.Decode(&obj.Acknowledgement)
	if err != nil {
		return errors.NewField("Acknowledgement", err)
	}
	// Deserialize `Relayer`:
	err = decoder.Decode(&obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj *SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg(buf []byte) (*SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg, error) {
	obj := new(SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for onRecvPacket callback
// Sent from router to IBC app when a packet is received
type SolanaIbcTypesAppMsgsOnRecvPacketMsg struct {
	SourceClient string                       `json:"sourceClient"`
	DestClient   string                       `json:"destClient"`
	Sequence     uint64                       `json:"sequence"`
	Payload      SolanaIbcTypesAppMsgsPayload `json:"payload"`
	Relayer      solanago.PublicKey           `json:"relayer"`
}

func (obj SolanaIbcTypesAppMsgsOnRecvPacketMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `DestClient`:
	err = encoder.Encode(obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `Payload`:
	err = encoder.Encode(obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Serialize `Relayer`:
	err = encoder.Encode(obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj SolanaIbcTypesAppMsgsOnRecvPacketMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesAppMsgsOnRecvPacketMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesAppMsgsOnRecvPacketMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `DestClient`:
	err = decoder.Decode(&obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `Payload`:
	err = decoder.Decode(&obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Deserialize `Relayer`:
	err = decoder.Decode(&obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj *SolanaIbcTypesAppMsgsOnRecvPacketMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesAppMsgsOnRecvPacketMsg: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesAppMsgsOnRecvPacketMsg(buf []byte) (*SolanaIbcTypesAppMsgsOnRecvPacketMsg, error) {
	obj := new(SolanaIbcTypesAppMsgsOnRecvPacketMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for onTimeoutPacket callback
// Sent from router to IBC app when a packet times out
type SolanaIbcTypesAppMsgsOnTimeoutPacketMsg struct {
	SourceClient string                       `json:"sourceClient"`
	DestClient   string                       `json:"destClient"`
	Sequence     uint64                       `json:"sequence"`
	Payload      SolanaIbcTypesAppMsgsPayload `json:"payload"`
	Relayer      solanago.PublicKey           `json:"relayer"`
}

func (obj SolanaIbcTypesAppMsgsOnTimeoutPacketMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `DestClient`:
	err = encoder.Encode(obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `Payload`:
	err = encoder.Encode(obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Serialize `Relayer`:
	err = encoder.Encode(obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj SolanaIbcTypesAppMsgsOnTimeoutPacketMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesAppMsgsOnTimeoutPacketMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesAppMsgsOnTimeoutPacketMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `DestClient`:
	err = decoder.Decode(&obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `Payload`:
	err = decoder.Decode(&obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Deserialize `Relayer`:
	err = decoder.Decode(&obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj *SolanaIbcTypesAppMsgsOnTimeoutPacketMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesAppMsgsOnTimeoutPacketMsg: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesAppMsgsOnTimeoutPacketMsg(buf []byte) (*SolanaIbcTypesAppMsgsOnTimeoutPacketMsg, error) {
	obj := new(SolanaIbcTypesAppMsgsOnTimeoutPacketMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Payload structure shared between router and IBC apps
type SolanaIbcTypesAppMsgsPayload struct {
	SourcePort string `json:"sourcePort"`
	DestPort   string `json:"destPort"`
	Version    string `json:"version"`
	Encoding   string `json:"encoding"`
	Value      []byte `json:"value"`
}

func (obj SolanaIbcTypesAppMsgsPayload) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourcePort`:
	err = encoder.Encode(obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Serialize `DestPort`:
	err = encoder.Encode(obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Encoding`:
	err = encoder.Encode(obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Serialize `Value`:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj SolanaIbcTypesAppMsgsPayload) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesAppMsgsPayload: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesAppMsgsPayload) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourcePort`:
	err = decoder.Decode(&obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Deserialize `DestPort`:
	err = decoder.Decode(&obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Encoding`:
	err = decoder.Decode(&obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj *SolanaIbcTypesAppMsgsPayload) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesAppMsgsPayload: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesAppMsgsPayload(buf []byte) (*SolanaIbcTypesAppMsgsPayload, error) {
	obj := new(SolanaIbcTypesAppMsgsPayload)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
