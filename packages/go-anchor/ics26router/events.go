// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package ics26_router

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_AckPacketEvent:
		value := new(AckPacketEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as AckPacketEvent: %w", err)
		}
		return value, nil
	case Event_ClientAddedEvent:
		value := new(ClientAddedEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as ClientAddedEvent: %w", err)
		}
		return value, nil
	case Event_ClientStatusUpdatedEvent:
		value := new(ClientStatusUpdatedEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as ClientStatusUpdatedEvent: %w", err)
		}
		return value, nil
	case Event_IbcAppAdded:
		value := new(IbcAppAdded)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as IbcAppAdded: %w", err)
		}
		return value, nil
	case Event_NoopEvent:
		value := new(NoopEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as NoopEvent: %w", err)
		}
		return value, nil
	case Event_SendPacketEvent:
		value := new(SendPacketEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as SendPacketEvent: %w", err)
		}
		return value, nil
	case Event_TimeoutPacketEvent:
		value := new(TimeoutPacketEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as TimeoutPacketEvent: %w", err)
		}
		return value, nil
	case Event_WriteAcknowledgementEvent:
		value := new(WriteAcknowledgementEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as WriteAcknowledgementEvent: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_AckPacketEvent(eventData []byte) (*AckPacketEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_AckPacketEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_AckPacketEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(AckPacketEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type AckPacketEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_ClientAddedEvent(eventData []byte) (*ClientAddedEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_ClientAddedEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_ClientAddedEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(ClientAddedEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type ClientAddedEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_ClientStatusUpdatedEvent(eventData []byte) (*ClientStatusUpdatedEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_ClientStatusUpdatedEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_ClientStatusUpdatedEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(ClientStatusUpdatedEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type ClientStatusUpdatedEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_IbcAppAdded(eventData []byte) (*IbcAppAdded, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_IbcAppAdded {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_IbcAppAdded, binary.FormatDiscriminator(discriminator))
	}
	event := new(IbcAppAdded)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type IbcAppAdded: %w", err)
	}
	return event, nil
}

func ParseEvent_NoopEvent(eventData []byte) (*NoopEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_NoopEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_NoopEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(NoopEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type NoopEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_SendPacketEvent(eventData []byte) (*SendPacketEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_SendPacketEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_SendPacketEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(SendPacketEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type SendPacketEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_TimeoutPacketEvent(eventData []byte) (*TimeoutPacketEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_TimeoutPacketEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_TimeoutPacketEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(TimeoutPacketEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type TimeoutPacketEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_WriteAcknowledgementEvent(eventData []byte) (*WriteAcknowledgementEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_WriteAcknowledgementEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_WriteAcknowledgementEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(WriteAcknowledgementEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type WriteAcknowledgementEvent: %w", err)
	}
	return event, nil
}
