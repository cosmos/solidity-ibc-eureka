// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package ics26_router

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Account schema version
type Ics26RouterStateAccountVersion binary.BorshEnum

const (
	Ics26RouterStateAccountVersion_V1 Ics26RouterStateAccountVersion = iota
)

func (value Ics26RouterStateAccountVersion) String() string {
	switch value {
	case Ics26RouterStateAccountVersion_V1:
		return "V1"
	default:
		return ""
	}
}

// Client mapping client IDs to light client program IDs
type Ics26RouterStateClient struct {
	// Schema version for upgrades
	Version Ics26RouterStateAccountVersion `json:"version"`

	// The client identifier
	ClientId string `json:"clientId"`

	// The program ID of the light client
	ClientProgramId solanago.PublicKey `json:"clientProgramId"`

	// Counterparty chain information
	CounterpartyInfo Ics26RouterStateCounterpartyInfo `json:"counterpartyInfo"`

	// Authority that registered this client
	Authority solanago.PublicKey `json:"authority"`

	// Whether the client is active
	Active bool `json:"active"`

	// Reserved space for future fields
	Reserved [256]uint8 `json:"reserved"`
}

func (obj Ics26RouterStateClient) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `ClientProgramId`:
	err = encoder.Encode(obj.ClientProgramId)
	if err != nil {
		return errors.NewField("ClientProgramId", err)
	}
	// Serialize `CounterpartyInfo`:
	err = encoder.Encode(obj.CounterpartyInfo)
	if err != nil {
		return errors.NewField("CounterpartyInfo", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `Active`:
	err = encoder.Encode(obj.Active)
	if err != nil {
		return errors.NewField("Active", err)
	}
	// Serialize `Reserved`:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj Ics26RouterStateClient) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics26RouterStateClient: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics26RouterStateClient) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `ClientProgramId`:
	err = decoder.Decode(&obj.ClientProgramId)
	if err != nil {
		return errors.NewField("ClientProgramId", err)
	}
	// Deserialize `CounterpartyInfo`:
	err = decoder.Decode(&obj.CounterpartyInfo)
	if err != nil {
		return errors.NewField("CounterpartyInfo", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `Active`:
	err = decoder.Decode(&obj.Active)
	if err != nil {
		return errors.NewField("Active", err)
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj *Ics26RouterStateClient) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics26RouterStateClient: %w", err)
	}
	return nil
}

func UnmarshalIcs26RouterStateClient(buf []byte) (*Ics26RouterStateClient, error) {
	obj := new(Ics26RouterStateClient)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Client sequence tracking
type Ics26RouterStateClientSequence struct {
	// Schema version for upgrades
	Version Ics26RouterStateAccountVersion `json:"version"`

	// Next sequence number for sending packets
	NextSequenceSend uint64 `json:"nextSequenceSend"`

	// Reserved space for future fields
	Reserved [256]uint8 `json:"reserved"`
}

func (obj Ics26RouterStateClientSequence) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `NextSequenceSend`:
	err = encoder.Encode(obj.NextSequenceSend)
	if err != nil {
		return errors.NewField("NextSequenceSend", err)
	}
	// Serialize `Reserved`:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj Ics26RouterStateClientSequence) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics26RouterStateClientSequence: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics26RouterStateClientSequence) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `NextSequenceSend`:
	err = decoder.Decode(&obj.NextSequenceSend)
	if err != nil {
		return errors.NewField("NextSequenceSend", err)
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj *Ics26RouterStateClientSequence) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics26RouterStateClientSequence: %w", err)
	}
	return nil
}

func UnmarshalIcs26RouterStateClientSequence(buf []byte) (*Ics26RouterStateClientSequence, error) {
	obj := new(Ics26RouterStateClientSequence)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Commitment storage (simple key-value)
type Ics26RouterStateCommitment struct {
	// The commitment value (sha256 hash)
	Value [32]uint8 `json:"value"`
}

func (obj Ics26RouterStateCommitment) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Value`:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj Ics26RouterStateCommitment) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics26RouterStateCommitment: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics26RouterStateCommitment) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj *Ics26RouterStateCommitment) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics26RouterStateCommitment: %w", err)
	}
	return nil
}

func UnmarshalIcs26RouterStateCommitment(buf []byte) (*Ics26RouterStateCommitment, error) {
	obj := new(Ics26RouterStateCommitment)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Counterparty chain information
type Ics26RouterStateCounterpartyInfo struct {
	// Client ID on the counterparty chain
	ClientId string `json:"clientId"`

	// Merkle prefix for proof verification
	MerklePrefix [][]byte `json:"merklePrefix"`
}

func (obj Ics26RouterStateCounterpartyInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `MerklePrefix`:
	err = encoder.Encode(obj.MerklePrefix)
	if err != nil {
		return errors.NewField("MerklePrefix", err)
	}
	return nil
}

func (obj Ics26RouterStateCounterpartyInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics26RouterStateCounterpartyInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics26RouterStateCounterpartyInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `MerklePrefix`:
	err = decoder.Decode(&obj.MerklePrefix)
	if err != nil {
		return errors.NewField("MerklePrefix", err)
	}
	return nil
}

func (obj *Ics26RouterStateCounterpartyInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics26RouterStateCounterpartyInfo: %w", err)
	}
	return nil
}

func UnmarshalIcs26RouterStateCounterpartyInfo(buf []byte) (*Ics26RouterStateCounterpartyInfo, error) {
	obj := new(Ics26RouterStateCounterpartyInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// `IBCApp` mapping port IDs to IBC app program IDs
type Ics26RouterStateIbcApp struct {
	// Schema version for upgrades
	Version Ics26RouterStateAccountVersion `json:"version"`

	// The port identifier
	PortId string `json:"portId"`

	// The program ID of the IBC application
	AppProgramId solanago.PublicKey `json:"appProgramId"`

	// Authority that registered this port
	Authority solanago.PublicKey `json:"authority"`

	// Reserved space for future fields
	Reserved [256]uint8 `json:"reserved"`
}

func (obj Ics26RouterStateIbcApp) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `PortId`:
	err = encoder.Encode(obj.PortId)
	if err != nil {
		return errors.NewField("PortId", err)
	}
	// Serialize `AppProgramId`:
	err = encoder.Encode(obj.AppProgramId)
	if err != nil {
		return errors.NewField("AppProgramId", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `Reserved`:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj Ics26RouterStateIbcApp) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics26RouterStateIbcApp: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics26RouterStateIbcApp) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `PortId`:
	err = decoder.Decode(&obj.PortId)
	if err != nil {
		return errors.NewField("PortId", err)
	}
	// Deserialize `AppProgramId`:
	err = decoder.Decode(&obj.AppProgramId)
	if err != nil {
		return errors.NewField("AppProgramId", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj *Ics26RouterStateIbcApp) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics26RouterStateIbcApp: %w", err)
	}
	return nil
}

func UnmarshalIcs26RouterStateIbcApp(buf []byte) (*Ics26RouterStateIbcApp, error) {
	obj := new(Ics26RouterStateIbcApp)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Storage for payload chunks during multi-transaction upload
type Ics26RouterStatePayloadChunk struct {
	// Client ID this chunk belongs to
	ClientId string `json:"clientId"`

	// Packet sequence number
	Sequence uint64 `json:"sequence"`

	// Index of the payload this chunk belongs to (for multi-payload packets)
	PayloadIndex uint8 `json:"payloadIndex"`

	// Index of this chunk (0-based)
	ChunkIndex uint8 `json:"chunkIndex"`

	// The chunk data
	ChunkData []byte `json:"chunkData"`
}

func (obj Ics26RouterStatePayloadChunk) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `PayloadIndex`:
	err = encoder.Encode(obj.PayloadIndex)
	if err != nil {
		return errors.NewField("PayloadIndex", err)
	}
	// Serialize `ChunkIndex`:
	err = encoder.Encode(obj.ChunkIndex)
	if err != nil {
		return errors.NewField("ChunkIndex", err)
	}
	// Serialize `ChunkData`:
	err = encoder.Encode(obj.ChunkData)
	if err != nil {
		return errors.NewField("ChunkData", err)
	}
	return nil
}

func (obj Ics26RouterStatePayloadChunk) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics26RouterStatePayloadChunk: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics26RouterStatePayloadChunk) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `PayloadIndex`:
	err = decoder.Decode(&obj.PayloadIndex)
	if err != nil {
		return errors.NewField("PayloadIndex", err)
	}
	// Deserialize `ChunkIndex`:
	err = decoder.Decode(&obj.ChunkIndex)
	if err != nil {
		return errors.NewField("ChunkIndex", err)
	}
	// Deserialize `ChunkData`:
	err = decoder.Decode(&obj.ChunkData)
	if err != nil {
		return errors.NewField("ChunkData", err)
	}
	return nil
}

func (obj *Ics26RouterStatePayloadChunk) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics26RouterStatePayloadChunk: %w", err)
	}
	return nil
}

func UnmarshalIcs26RouterStatePayloadChunk(buf []byte) (*Ics26RouterStatePayloadChunk, error) {
	obj := new(Ics26RouterStatePayloadChunk)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Storage for proof chunks during multi-transaction upload
type Ics26RouterStateProofChunk struct {
	// Client ID this chunk belongs to
	ClientId string `json:"clientId"`

	// Packet sequence number
	Sequence uint64 `json:"sequence"`

	// Index of this chunk (0-based)
	ChunkIndex uint8 `json:"chunkIndex"`

	// The chunk data
	ChunkData []byte `json:"chunkData"`
}

func (obj Ics26RouterStateProofChunk) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `ChunkIndex`:
	err = encoder.Encode(obj.ChunkIndex)
	if err != nil {
		return errors.NewField("ChunkIndex", err)
	}
	// Serialize `ChunkData`:
	err = encoder.Encode(obj.ChunkData)
	if err != nil {
		return errors.NewField("ChunkData", err)
	}
	return nil
}

func (obj Ics26RouterStateProofChunk) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics26RouterStateProofChunk: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics26RouterStateProofChunk) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `ChunkIndex`:
	err = decoder.Decode(&obj.ChunkIndex)
	if err != nil {
		return errors.NewField("ChunkIndex", err)
	}
	// Deserialize `ChunkData`:
	err = decoder.Decode(&obj.ChunkData)
	if err != nil {
		return errors.NewField("ChunkData", err)
	}
	return nil
}

func (obj *Ics26RouterStateProofChunk) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics26RouterStateProofChunk: %w", err)
	}
	return nil
}

func UnmarshalIcs26RouterStateProofChunk(buf []byte) (*Ics26RouterStateProofChunk, error) {
	obj := new(Ics26RouterStateProofChunk)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Router state account
// TODO: Implement multi-router ACL
type Ics26RouterStateRouterState struct {
	// Schema version for upgrades
	Version Ics26RouterStateAccountVersion `json:"version"`

	// Authority that can perform restricted operations
	Authority solanago.PublicKey `json:"authority"`

	// Reserved space for future fields
	Reserved [256]uint8 `json:"reserved"`
}

func (obj Ics26RouterStateRouterState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `Reserved`:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj Ics26RouterStateRouterState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics26RouterStateRouterState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics26RouterStateRouterState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj *Ics26RouterStateRouterState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics26RouterStateRouterState: %w", err)
	}
	return nil
}

func UnmarshalIcs26RouterStateRouterState(buf []byte) (*Ics26RouterStateRouterState, error) {
	obj := new(Ics26RouterStateRouterState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Payload structure shared between router and IBC apps
type SolanaIbcTypesAppMsgsPayload struct {
	SourcePort string `json:"sourcePort"`
	DestPort   string `json:"destPort"`
	Version    string `json:"version"`
	Encoding   string `json:"encoding"`
	Value      []byte `json:"value"`
}

func (obj SolanaIbcTypesAppMsgsPayload) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourcePort`:
	err = encoder.Encode(obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Serialize `DestPort`:
	err = encoder.Encode(obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Encoding`:
	err = encoder.Encode(obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Serialize `Value`:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj SolanaIbcTypesAppMsgsPayload) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesAppMsgsPayload: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesAppMsgsPayload) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourcePort`:
	err = decoder.Decode(&obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Deserialize `DestPort`:
	err = decoder.Decode(&obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Encoding`:
	err = decoder.Decode(&obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj *SolanaIbcTypesAppMsgsPayload) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesAppMsgsPayload: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesAppMsgsPayload(buf []byte) (*SolanaIbcTypesAppMsgsPayload, error) {
	obj := new(SolanaIbcTypesAppMsgsPayload)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for acknowledging a packet
type SolanaIbcTypesRouterMsgAckPacket struct {
	Packet          SolanaIbcTypesRouterPacket            `json:"packet"`
	Payloads        []SolanaIbcTypesRouterPayloadMetadata `json:"payloads"`
	Acknowledgement []byte                                `json:"acknowledgement"`
	Proof           SolanaIbcTypesRouterProofMetadata     `json:"proof"`
}

func (obj SolanaIbcTypesRouterMsgAckPacket) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Packet`:
	err = encoder.Encode(obj.Packet)
	if err != nil {
		return errors.NewField("Packet", err)
	}
	// Serialize `Payloads`:
	err = encoder.Encode(obj.Payloads)
	if err != nil {
		return errors.NewField("Payloads", err)
	}
	// Serialize `Acknowledgement`:
	err = encoder.Encode(obj.Acknowledgement)
	if err != nil {
		return errors.NewField("Acknowledgement", err)
	}
	// Serialize `Proof`:
	err = encoder.Encode(obj.Proof)
	if err != nil {
		return errors.NewField("Proof", err)
	}
	return nil
}

func (obj SolanaIbcTypesRouterMsgAckPacket) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesRouterMsgAckPacket: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesRouterMsgAckPacket) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Packet`:
	err = decoder.Decode(&obj.Packet)
	if err != nil {
		return errors.NewField("Packet", err)
	}
	// Deserialize `Payloads`:
	err = decoder.Decode(&obj.Payloads)
	if err != nil {
		return errors.NewField("Payloads", err)
	}
	// Deserialize `Acknowledgement`:
	err = decoder.Decode(&obj.Acknowledgement)
	if err != nil {
		return errors.NewField("Acknowledgement", err)
	}
	// Deserialize `Proof`:
	err = decoder.Decode(&obj.Proof)
	if err != nil {
		return errors.NewField("Proof", err)
	}
	return nil
}

func (obj *SolanaIbcTypesRouterMsgAckPacket) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesRouterMsgAckPacket: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesRouterMsgAckPacket(buf []byte) (*SolanaIbcTypesRouterMsgAckPacket, error) {
	obj := new(SolanaIbcTypesRouterMsgAckPacket)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for cleanup
type SolanaIbcTypesRouterMsgCleanupChunks struct {
	ClientId         string `json:"clientId"`
	Sequence         uint64 `json:"sequence"`
	PayloadChunks    []byte `json:"payloadChunks"`
	TotalProofChunks uint8  `json:"totalProofChunks"`
}

func (obj SolanaIbcTypesRouterMsgCleanupChunks) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `PayloadChunks`:
	err = encoder.Encode(obj.PayloadChunks)
	if err != nil {
		return errors.NewField("PayloadChunks", err)
	}
	// Serialize `TotalProofChunks`:
	err = encoder.Encode(obj.TotalProofChunks)
	if err != nil {
		return errors.NewField("TotalProofChunks", err)
	}
	return nil
}

func (obj SolanaIbcTypesRouterMsgCleanupChunks) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesRouterMsgCleanupChunks: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesRouterMsgCleanupChunks) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `PayloadChunks`:
	err = decoder.Decode(&obj.PayloadChunks)
	if err != nil {
		return errors.NewField("PayloadChunks", err)
	}
	// Deserialize `TotalProofChunks`:
	err = decoder.Decode(&obj.TotalProofChunks)
	if err != nil {
		return errors.NewField("TotalProofChunks", err)
	}
	return nil
}

func (obj *SolanaIbcTypesRouterMsgCleanupChunks) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesRouterMsgCleanupChunks: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesRouterMsgCleanupChunks(buf []byte) (*SolanaIbcTypesRouterMsgCleanupChunks, error) {
	obj := new(SolanaIbcTypesRouterMsgCleanupChunks)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for receiving a packet
type SolanaIbcTypesRouterMsgRecvPacket struct {
	Packet   SolanaIbcTypesRouterPacket            `json:"packet"`
	Payloads []SolanaIbcTypesRouterPayloadMetadata `json:"payloads"`
	Proof    SolanaIbcTypesRouterProofMetadata     `json:"proof"`
}

func (obj SolanaIbcTypesRouterMsgRecvPacket) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Packet`:
	err = encoder.Encode(obj.Packet)
	if err != nil {
		return errors.NewField("Packet", err)
	}
	// Serialize `Payloads`:
	err = encoder.Encode(obj.Payloads)
	if err != nil {
		return errors.NewField("Payloads", err)
	}
	// Serialize `Proof`:
	err = encoder.Encode(obj.Proof)
	if err != nil {
		return errors.NewField("Proof", err)
	}
	return nil
}

func (obj SolanaIbcTypesRouterMsgRecvPacket) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesRouterMsgRecvPacket: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesRouterMsgRecvPacket) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Packet`:
	err = decoder.Decode(&obj.Packet)
	if err != nil {
		return errors.NewField("Packet", err)
	}
	// Deserialize `Payloads`:
	err = decoder.Decode(&obj.Payloads)
	if err != nil {
		return errors.NewField("Payloads", err)
	}
	// Deserialize `Proof`:
	err = decoder.Decode(&obj.Proof)
	if err != nil {
		return errors.NewField("Proof", err)
	}
	return nil
}

func (obj *SolanaIbcTypesRouterMsgRecvPacket) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesRouterMsgRecvPacket: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesRouterMsgRecvPacket(buf []byte) (*SolanaIbcTypesRouterMsgRecvPacket, error) {
	obj := new(SolanaIbcTypesRouterMsgRecvPacket)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for sending a packet
type SolanaIbcTypesRouterMsgSendPacket struct {
	SourceClient     string                       `json:"sourceClient"`
	TimeoutTimestamp int64                        `json:"timeoutTimestamp"`
	Payload          SolanaIbcTypesAppMsgsPayload `json:"payload"`
}

func (obj SolanaIbcTypesRouterMsgSendPacket) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `TimeoutTimestamp`:
	err = encoder.Encode(obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Serialize `Payload`:
	err = encoder.Encode(obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	return nil
}

func (obj SolanaIbcTypesRouterMsgSendPacket) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesRouterMsgSendPacket: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesRouterMsgSendPacket) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `TimeoutTimestamp`:
	err = decoder.Decode(&obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Deserialize `Payload`:
	err = decoder.Decode(&obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	return nil
}

func (obj *SolanaIbcTypesRouterMsgSendPacket) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesRouterMsgSendPacket: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesRouterMsgSendPacket(buf []byte) (*SolanaIbcTypesRouterMsgSendPacket, error) {
	obj := new(SolanaIbcTypesRouterMsgSendPacket)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for timing out a packet
type SolanaIbcTypesRouterMsgTimeoutPacket struct {
	Packet   SolanaIbcTypesRouterPacket            `json:"packet"`
	Payloads []SolanaIbcTypesRouterPayloadMetadata `json:"payloads"`
	Proof    SolanaIbcTypesRouterProofMetadata     `json:"proof"`
}

func (obj SolanaIbcTypesRouterMsgTimeoutPacket) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Packet`:
	err = encoder.Encode(obj.Packet)
	if err != nil {
		return errors.NewField("Packet", err)
	}
	// Serialize `Payloads`:
	err = encoder.Encode(obj.Payloads)
	if err != nil {
		return errors.NewField("Payloads", err)
	}
	// Serialize `Proof`:
	err = encoder.Encode(obj.Proof)
	if err != nil {
		return errors.NewField("Proof", err)
	}
	return nil
}

func (obj SolanaIbcTypesRouterMsgTimeoutPacket) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesRouterMsgTimeoutPacket: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesRouterMsgTimeoutPacket) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Packet`:
	err = decoder.Decode(&obj.Packet)
	if err != nil {
		return errors.NewField("Packet", err)
	}
	// Deserialize `Payloads`:
	err = decoder.Decode(&obj.Payloads)
	if err != nil {
		return errors.NewField("Payloads", err)
	}
	// Deserialize `Proof`:
	err = decoder.Decode(&obj.Proof)
	if err != nil {
		return errors.NewField("Proof", err)
	}
	return nil
}

func (obj *SolanaIbcTypesRouterMsgTimeoutPacket) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesRouterMsgTimeoutPacket: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesRouterMsgTimeoutPacket(buf []byte) (*SolanaIbcTypesRouterMsgTimeoutPacket, error) {
	obj := new(SolanaIbcTypesRouterMsgTimeoutPacket)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for uploading chunks
type SolanaIbcTypesRouterMsgUploadChunk struct {
	ClientId     string `json:"clientId"`
	Sequence     uint64 `json:"sequence"`
	PayloadIndex uint8  `json:"payloadIndex"`
	ChunkIndex   uint8  `json:"chunkIndex"`
	ChunkData    []byte `json:"chunkData"`
}

func (obj SolanaIbcTypesRouterMsgUploadChunk) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `PayloadIndex`:
	err = encoder.Encode(obj.PayloadIndex)
	if err != nil {
		return errors.NewField("PayloadIndex", err)
	}
	// Serialize `ChunkIndex`:
	err = encoder.Encode(obj.ChunkIndex)
	if err != nil {
		return errors.NewField("ChunkIndex", err)
	}
	// Serialize `ChunkData`:
	err = encoder.Encode(obj.ChunkData)
	if err != nil {
		return errors.NewField("ChunkData", err)
	}
	return nil
}

func (obj SolanaIbcTypesRouterMsgUploadChunk) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesRouterMsgUploadChunk: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesRouterMsgUploadChunk) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `PayloadIndex`:
	err = decoder.Decode(&obj.PayloadIndex)
	if err != nil {
		return errors.NewField("PayloadIndex", err)
	}
	// Deserialize `ChunkIndex`:
	err = decoder.Decode(&obj.ChunkIndex)
	if err != nil {
		return errors.NewField("ChunkIndex", err)
	}
	// Deserialize `ChunkData`:
	err = decoder.Decode(&obj.ChunkData)
	if err != nil {
		return errors.NewField("ChunkData", err)
	}
	return nil
}

func (obj *SolanaIbcTypesRouterMsgUploadChunk) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesRouterMsgUploadChunk: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesRouterMsgUploadChunk(buf []byte) (*SolanaIbcTypesRouterMsgUploadChunk, error) {
	obj := new(SolanaIbcTypesRouterMsgUploadChunk)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Packet structure matching Ethereum's ICS26RouterMsgs.Packet
type SolanaIbcTypesRouterPacket struct {
	Sequence         uint64                         `json:"sequence"`
	SourceClient     string                         `json:"sourceClient"`
	DestClient       string                         `json:"destClient"`
	TimeoutTimestamp int64                          `json:"timeoutTimestamp"`
	Payloads         []SolanaIbcTypesAppMsgsPayload `json:"payloads"`
}

func (obj SolanaIbcTypesRouterPacket) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `DestClient`:
	err = encoder.Encode(obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Serialize `TimeoutTimestamp`:
	err = encoder.Encode(obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Serialize `Payloads`:
	err = encoder.Encode(obj.Payloads)
	if err != nil {
		return errors.NewField("Payloads", err)
	}
	return nil
}

func (obj SolanaIbcTypesRouterPacket) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesRouterPacket: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesRouterPacket) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `DestClient`:
	err = decoder.Decode(&obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Deserialize `TimeoutTimestamp`:
	err = decoder.Decode(&obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Deserialize `Payloads`:
	err = decoder.Decode(&obj.Payloads)
	if err != nil {
		return errors.NewField("Payloads", err)
	}
	return nil
}

func (obj *SolanaIbcTypesRouterPacket) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesRouterPacket: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesRouterPacket(buf []byte) (*SolanaIbcTypesRouterPacket, error) {
	obj := new(SolanaIbcTypesRouterPacket)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Payload metadata for chunked operations
type SolanaIbcTypesRouterPayloadMetadata struct {
	SourcePort  string `json:"sourcePort"`
	DestPort    string `json:"destPort"`
	Version     string `json:"version"`
	Encoding    string `json:"encoding"`
	TotalChunks uint8  `json:"totalChunks"`
}

func (obj SolanaIbcTypesRouterPayloadMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourcePort`:
	err = encoder.Encode(obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Serialize `DestPort`:
	err = encoder.Encode(obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Encoding`:
	err = encoder.Encode(obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Serialize `TotalChunks`:
	err = encoder.Encode(obj.TotalChunks)
	if err != nil {
		return errors.NewField("TotalChunks", err)
	}
	return nil
}

func (obj SolanaIbcTypesRouterPayloadMetadata) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesRouterPayloadMetadata: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesRouterPayloadMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourcePort`:
	err = decoder.Decode(&obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Deserialize `DestPort`:
	err = decoder.Decode(&obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Encoding`:
	err = decoder.Decode(&obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Deserialize `TotalChunks`:
	err = decoder.Decode(&obj.TotalChunks)
	if err != nil {
		return errors.NewField("TotalChunks", err)
	}
	return nil
}

func (obj *SolanaIbcTypesRouterPayloadMetadata) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesRouterPayloadMetadata: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesRouterPayloadMetadata(buf []byte) (*SolanaIbcTypesRouterPayloadMetadata, error) {
	obj := new(SolanaIbcTypesRouterPayloadMetadata)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Proof metadata for chunked operations
type SolanaIbcTypesRouterProofMetadata struct {
	Height      uint64 `json:"height"`
	TotalChunks uint8  `json:"totalChunks"`
}

func (obj SolanaIbcTypesRouterProofMetadata) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Height`:
	err = encoder.Encode(obj.Height)
	if err != nil {
		return errors.NewField("Height", err)
	}
	// Serialize `TotalChunks`:
	err = encoder.Encode(obj.TotalChunks)
	if err != nil {
		return errors.NewField("TotalChunks", err)
	}
	return nil
}

func (obj SolanaIbcTypesRouterProofMetadata) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesRouterProofMetadata: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesRouterProofMetadata) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Height`:
	err = decoder.Decode(&obj.Height)
	if err != nil {
		return errors.NewField("Height", err)
	}
	// Deserialize `TotalChunks`:
	err = decoder.Decode(&obj.TotalChunks)
	if err != nil {
		return errors.NewField("TotalChunks", err)
	}
	return nil
}

func (obj *SolanaIbcTypesRouterProofMetadata) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesRouterProofMetadata: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesRouterProofMetadata(buf []byte) (*SolanaIbcTypesRouterProofMetadata, error) {
	obj := new(SolanaIbcTypesRouterProofMetadata)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
