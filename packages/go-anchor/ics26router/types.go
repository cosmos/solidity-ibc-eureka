// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package ics26_router

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

type AckPacketEvent struct {
	ClientId        string `json:"clientId"`
	Sequence        uint64 `json:"sequence"`
	PacketData      []byte `json:"packetData"`
	Acknowledgement []byte `json:"acknowledgement"`
}

func (obj AckPacketEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `PacketData`:
	err = encoder.Encode(obj.PacketData)
	if err != nil {
		return errors.NewField("PacketData", err)
	}
	// Serialize `Acknowledgement`:
	err = encoder.Encode(obj.Acknowledgement)
	if err != nil {
		return errors.NewField("Acknowledgement", err)
	}
	return nil
}

func (obj AckPacketEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding AckPacketEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *AckPacketEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `PacketData`:
	err = decoder.Decode(&obj.PacketData)
	if err != nil {
		return errors.NewField("PacketData", err)
	}
	// Deserialize `Acknowledgement`:
	err = decoder.Decode(&obj.Acknowledgement)
	if err != nil {
		return errors.NewField("Acknowledgement", err)
	}
	return nil
}

func (obj *AckPacketEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling AckPacketEvent: %w", err)
	}
	return nil
}

func UnmarshalAckPacketEvent(buf []byte) (*AckPacketEvent, error) {
	obj := new(AckPacketEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Client mapping client IDs to light client program IDs
type Client struct {
	// The client identifier
	ClientId string `json:"clientId"`

	// The program ID of the light client
	ClientProgramId solanago.PublicKey `json:"clientProgramId"`

	// Counterparty chain information
	CounterpartyInfo CounterpartyInfo `json:"counterpartyInfo"`

	// Authority that registered this client
	Authority solanago.PublicKey `json:"authority"`

	// Whether the client is active
	Active bool `json:"active"`
}

func (obj Client) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `ClientProgramId`:
	err = encoder.Encode(obj.ClientProgramId)
	if err != nil {
		return errors.NewField("ClientProgramId", err)
	}
	// Serialize `CounterpartyInfo`:
	err = encoder.Encode(obj.CounterpartyInfo)
	if err != nil {
		return errors.NewField("CounterpartyInfo", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `Active`:
	err = encoder.Encode(obj.Active)
	if err != nil {
		return errors.NewField("Active", err)
	}
	return nil
}

func (obj Client) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Client: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Client) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `ClientProgramId`:
	err = decoder.Decode(&obj.ClientProgramId)
	if err != nil {
		return errors.NewField("ClientProgramId", err)
	}
	// Deserialize `CounterpartyInfo`:
	err = decoder.Decode(&obj.CounterpartyInfo)
	if err != nil {
		return errors.NewField("CounterpartyInfo", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `Active`:
	err = decoder.Decode(&obj.Active)
	if err != nil {
		return errors.NewField("Active", err)
	}
	return nil
}

func (obj *Client) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Client: %w", err)
	}
	return nil
}

func UnmarshalClient(buf []byte) (*Client, error) {
	obj := new(Client)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ClientAddedEvent struct {
	ClientId        string             `json:"clientId"`
	ClientProgramId solanago.PublicKey `json:"clientProgramId"`
	Authority       solanago.PublicKey `json:"authority"`
}

func (obj ClientAddedEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `ClientProgramId`:
	err = encoder.Encode(obj.ClientProgramId)
	if err != nil {
		return errors.NewField("ClientProgramId", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	return nil
}

func (obj ClientAddedEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ClientAddedEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ClientAddedEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `ClientProgramId`:
	err = decoder.Decode(&obj.ClientProgramId)
	if err != nil {
		return errors.NewField("ClientProgramId", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	return nil
}

func (obj *ClientAddedEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ClientAddedEvent: %w", err)
	}
	return nil
}

func UnmarshalClientAddedEvent(buf []byte) (*ClientAddedEvent, error) {
	obj := new(ClientAddedEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Client sequence tracking
type ClientSequence struct {
	// Next sequence number for sending packets
	NextSequenceSend uint64 `json:"nextSequenceSend"`
}

func (obj ClientSequence) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `NextSequenceSend`:
	err = encoder.Encode(obj.NextSequenceSend)
	if err != nil {
		return errors.NewField("NextSequenceSend", err)
	}
	return nil
}

func (obj ClientSequence) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ClientSequence: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ClientSequence) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `NextSequenceSend`:
	err = decoder.Decode(&obj.NextSequenceSend)
	if err != nil {
		return errors.NewField("NextSequenceSend", err)
	}
	return nil
}

func (obj *ClientSequence) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ClientSequence: %w", err)
	}
	return nil
}

func UnmarshalClientSequence(buf []byte) (*ClientSequence, error) {
	obj := new(ClientSequence)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ClientStatusUpdatedEvent struct {
	ClientId string `json:"clientId"`
	Active   bool   `json:"active"`
}

func (obj ClientStatusUpdatedEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Active`:
	err = encoder.Encode(obj.Active)
	if err != nil {
		return errors.NewField("Active", err)
	}
	return nil
}

func (obj ClientStatusUpdatedEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ClientStatusUpdatedEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ClientStatusUpdatedEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Active`:
	err = decoder.Decode(&obj.Active)
	if err != nil {
		return errors.NewField("Active", err)
	}
	return nil
}

func (obj *ClientStatusUpdatedEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ClientStatusUpdatedEvent: %w", err)
	}
	return nil
}

func UnmarshalClientStatusUpdatedEvent(buf []byte) (*ClientStatusUpdatedEvent, error) {
	obj := new(ClientStatusUpdatedEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Commitment storage (simple key-value)
type Commitment struct {
	// The commitment value (sha256 hash)
	Value [32]uint8 `json:"value"`
}

func (obj Commitment) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Value`:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj Commitment) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Commitment: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Commitment) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj *Commitment) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Commitment: %w", err)
	}
	return nil
}

func UnmarshalCommitment(buf []byte) (*Commitment, error) {
	obj := new(Commitment)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Counterparty chain information
type CounterpartyInfo struct {
	// Client ID on the counterparty chain
	ClientId string `json:"clientId"`

	// Merkle prefix for proof verification
	MerklePrefix [][]byte `json:"merklePrefix"`
}

func (obj CounterpartyInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `MerklePrefix`:
	err = encoder.Encode(obj.MerklePrefix)
	if err != nil {
		return errors.NewField("MerklePrefix", err)
	}
	return nil
}

func (obj CounterpartyInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CounterpartyInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CounterpartyInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `MerklePrefix`:
	err = decoder.Decode(&obj.MerklePrefix)
	if err != nil {
		return errors.NewField("MerklePrefix", err)
	}
	return nil
}

func (obj *CounterpartyInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CounterpartyInfo: %w", err)
	}
	return nil
}

func UnmarshalCounterpartyInfo(buf []byte) (*CounterpartyInfo, error) {
	obj := new(CounterpartyInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// `IBCApp` mapping port IDs to IBC app program IDs
type IbcApp struct {
	// The port identifier
	PortId string `json:"portId"`

	// The program ID of the IBC application
	AppProgramId solanago.PublicKey `json:"appProgramId"`

	// Authority that registered this port
	Authority solanago.PublicKey `json:"authority"`
}

func (obj IbcApp) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PortId`:
	err = encoder.Encode(obj.PortId)
	if err != nil {
		return errors.NewField("PortId", err)
	}
	// Serialize `AppProgramId`:
	err = encoder.Encode(obj.AppProgramId)
	if err != nil {
		return errors.NewField("AppProgramId", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	return nil
}

func (obj IbcApp) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding IbcApp: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *IbcApp) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PortId`:
	err = decoder.Decode(&obj.PortId)
	if err != nil {
		return errors.NewField("PortId", err)
	}
	// Deserialize `AppProgramId`:
	err = decoder.Decode(&obj.AppProgramId)
	if err != nil {
		return errors.NewField("AppProgramId", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	return nil
}

func (obj *IbcApp) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling IbcApp: %w", err)
	}
	return nil
}

func UnmarshalIbcApp(buf []byte) (*IbcApp, error) {
	obj := new(IbcApp)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type IbcAppAdded struct {
	PortId       string             `json:"portId"`
	AppProgramId solanago.PublicKey `json:"appProgramId"`
}

func (obj IbcAppAdded) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PortId`:
	err = encoder.Encode(obj.PortId)
	if err != nil {
		return errors.NewField("PortId", err)
	}
	// Serialize `AppProgramId`:
	err = encoder.Encode(obj.AppProgramId)
	if err != nil {
		return errors.NewField("AppProgramId", err)
	}
	return nil
}

func (obj IbcAppAdded) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding IbcAppAdded: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *IbcAppAdded) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PortId`:
	err = decoder.Decode(&obj.PortId)
	if err != nil {
		return errors.NewField("PortId", err)
	}
	// Deserialize `AppProgramId`:
	err = decoder.Decode(&obj.AppProgramId)
	if err != nil {
		return errors.NewField("AppProgramId", err)
	}
	return nil
}

func (obj *IbcAppAdded) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling IbcAppAdded: %w", err)
	}
	return nil
}

func UnmarshalIbcAppAdded(buf []byte) (*IbcAppAdded, error) {
	obj := new(IbcAppAdded)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type MsgAckPacket struct {
	Packet          Packet `json:"packet"`
	Acknowledgement []byte `json:"acknowledgement"`
	ProofAcked      []byte `json:"proofAcked"`
	ProofHeight     uint64 `json:"proofHeight"`
}

func (obj MsgAckPacket) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Packet`:
	err = encoder.Encode(obj.Packet)
	if err != nil {
		return errors.NewField("Packet", err)
	}
	// Serialize `Acknowledgement`:
	err = encoder.Encode(obj.Acknowledgement)
	if err != nil {
		return errors.NewField("Acknowledgement", err)
	}
	// Serialize `ProofAcked`:
	err = encoder.Encode(obj.ProofAcked)
	if err != nil {
		return errors.NewField("ProofAcked", err)
	}
	// Serialize `ProofHeight`:
	err = encoder.Encode(obj.ProofHeight)
	if err != nil {
		return errors.NewField("ProofHeight", err)
	}
	return nil
}

func (obj MsgAckPacket) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MsgAckPacket: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MsgAckPacket) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Packet`:
	err = decoder.Decode(&obj.Packet)
	if err != nil {
		return errors.NewField("Packet", err)
	}
	// Deserialize `Acknowledgement`:
	err = decoder.Decode(&obj.Acknowledgement)
	if err != nil {
		return errors.NewField("Acknowledgement", err)
	}
	// Deserialize `ProofAcked`:
	err = decoder.Decode(&obj.ProofAcked)
	if err != nil {
		return errors.NewField("ProofAcked", err)
	}
	// Deserialize `ProofHeight`:
	err = decoder.Decode(&obj.ProofHeight)
	if err != nil {
		return errors.NewField("ProofHeight", err)
	}
	return nil
}

func (obj *MsgAckPacket) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MsgAckPacket: %w", err)
	}
	return nil
}

func UnmarshalMsgAckPacket(buf []byte) (*MsgAckPacket, error) {
	obj := new(MsgAckPacket)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type MsgRecvPacket struct {
	Packet          Packet `json:"packet"`
	ProofCommitment []byte `json:"proofCommitment"`
	ProofHeight     uint64 `json:"proofHeight"`
}

func (obj MsgRecvPacket) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Packet`:
	err = encoder.Encode(obj.Packet)
	if err != nil {
		return errors.NewField("Packet", err)
	}
	// Serialize `ProofCommitment`:
	err = encoder.Encode(obj.ProofCommitment)
	if err != nil {
		return errors.NewField("ProofCommitment", err)
	}
	// Serialize `ProofHeight`:
	err = encoder.Encode(obj.ProofHeight)
	if err != nil {
		return errors.NewField("ProofHeight", err)
	}
	return nil
}

func (obj MsgRecvPacket) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MsgRecvPacket: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MsgRecvPacket) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Packet`:
	err = decoder.Decode(&obj.Packet)
	if err != nil {
		return errors.NewField("Packet", err)
	}
	// Deserialize `ProofCommitment`:
	err = decoder.Decode(&obj.ProofCommitment)
	if err != nil {
		return errors.NewField("ProofCommitment", err)
	}
	// Deserialize `ProofHeight`:
	err = decoder.Decode(&obj.ProofHeight)
	if err != nil {
		return errors.NewField("ProofHeight", err)
	}
	return nil
}

func (obj *MsgRecvPacket) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MsgRecvPacket: %w", err)
	}
	return nil
}

func UnmarshalMsgRecvPacket(buf []byte) (*MsgRecvPacket, error) {
	obj := new(MsgRecvPacket)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message structures for instructions
type MsgSendPacket struct {
	SourceClient     string  `json:"sourceClient"`
	TimeoutTimestamp int64   `json:"timeoutTimestamp"`
	Payload          Payload `json:"payload"`
}

func (obj MsgSendPacket) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `TimeoutTimestamp`:
	err = encoder.Encode(obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Serialize `Payload`:
	err = encoder.Encode(obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	return nil
}

func (obj MsgSendPacket) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MsgSendPacket: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MsgSendPacket) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `TimeoutTimestamp`:
	err = decoder.Decode(&obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Deserialize `Payload`:
	err = decoder.Decode(&obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	return nil
}

func (obj *MsgSendPacket) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MsgSendPacket: %w", err)
	}
	return nil
}

func UnmarshalMsgSendPacket(buf []byte) (*MsgSendPacket, error) {
	obj := new(MsgSendPacket)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type MsgTimeoutPacket struct {
	Packet       Packet `json:"packet"`
	ProofTimeout []byte `json:"proofTimeout"`
	ProofHeight  uint64 `json:"proofHeight"`
}

func (obj MsgTimeoutPacket) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Packet`:
	err = encoder.Encode(obj.Packet)
	if err != nil {
		return errors.NewField("Packet", err)
	}
	// Serialize `ProofTimeout`:
	err = encoder.Encode(obj.ProofTimeout)
	if err != nil {
		return errors.NewField("ProofTimeout", err)
	}
	// Serialize `ProofHeight`:
	err = encoder.Encode(obj.ProofHeight)
	if err != nil {
		return errors.NewField("ProofHeight", err)
	}
	return nil
}

func (obj MsgTimeoutPacket) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MsgTimeoutPacket: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MsgTimeoutPacket) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Packet`:
	err = decoder.Decode(&obj.Packet)
	if err != nil {
		return errors.NewField("Packet", err)
	}
	// Deserialize `ProofTimeout`:
	err = decoder.Decode(&obj.ProofTimeout)
	if err != nil {
		return errors.NewField("ProofTimeout", err)
	}
	// Deserialize `ProofHeight`:
	err = decoder.Decode(&obj.ProofHeight)
	if err != nil {
		return errors.NewField("ProofHeight", err)
	}
	return nil
}

func (obj *MsgTimeoutPacket) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MsgTimeoutPacket: %w", err)
	}
	return nil
}

func UnmarshalMsgTimeoutPacket(buf []byte) (*MsgTimeoutPacket, error) {
	obj := new(MsgTimeoutPacket)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type NoopEvent struct{}

func (obj NoopEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	return nil
}

func (obj NoopEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding NoopEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *NoopEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	return nil
}

func (obj *NoopEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling NoopEvent: %w", err)
	}
	return nil
}

func UnmarshalNoopEvent(buf []byte) (*NoopEvent, error) {
	obj := new(NoopEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Packet structure matching Ethereum's ICS26RouterMsgs.Packet
type Packet struct {
	Sequence         uint64    `json:"sequence"`
	SourceClient     string    `json:"sourceClient"`
	DestClient       string    `json:"destClient"`
	TimeoutTimestamp int64     `json:"timeoutTimestamp"`
	Payloads         []Payload `json:"payloads"`
}

func (obj Packet) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `DestClient`:
	err = encoder.Encode(obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Serialize `TimeoutTimestamp`:
	err = encoder.Encode(obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Serialize `Payloads`:
	err = encoder.Encode(obj.Payloads)
	if err != nil {
		return errors.NewField("Payloads", err)
	}
	return nil
}

func (obj Packet) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Packet: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Packet) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `DestClient`:
	err = decoder.Decode(&obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Deserialize `TimeoutTimestamp`:
	err = decoder.Decode(&obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Deserialize `Payloads`:
	err = decoder.Decode(&obj.Payloads)
	if err != nil {
		return errors.NewField("Payloads", err)
	}
	return nil
}

func (obj *Packet) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Packet: %w", err)
	}
	return nil
}

func UnmarshalPacket(buf []byte) (*Packet, error) {
	obj := new(Packet)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Payload structure shared between router and IBC apps
type Payload struct {
	SourcePort string `json:"sourcePort"`
	DestPort   string `json:"destPort"`
	Version    string `json:"version"`
	Encoding   string `json:"encoding"`
	Value      []byte `json:"value"`
}

func (obj Payload) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourcePort`:
	err = encoder.Encode(obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Serialize `DestPort`:
	err = encoder.Encode(obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Encoding`:
	err = encoder.Encode(obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Serialize `Value`:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj Payload) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Payload: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Payload) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourcePort`:
	err = decoder.Decode(&obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Deserialize `DestPort`:
	err = decoder.Decode(&obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Encoding`:
	err = decoder.Decode(&obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj *Payload) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Payload: %w", err)
	}
	return nil
}

func UnmarshalPayload(buf []byte) (*Payload, error) {
	obj := new(Payload)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Router state account
// TODO: Implement multi-router ACL
type RouterState struct {
	// Authority that can perform restricted operations
	Authority solanago.PublicKey `json:"authority"`
}

func (obj RouterState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	return nil
}

func (obj RouterState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding RouterState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *RouterState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	return nil
}

func (obj *RouterState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling RouterState: %w", err)
	}
	return nil
}

func UnmarshalRouterState(buf []byte) (*RouterState, error) {
	obj := new(RouterState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type SendPacketEvent struct {
	ClientId   string `json:"clientId"`
	Sequence   uint64 `json:"sequence"`
	PacketData []byte `json:"packetData"`
}

func (obj SendPacketEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `PacketData`:
	err = encoder.Encode(obj.PacketData)
	if err != nil {
		return errors.NewField("PacketData", err)
	}
	return nil
}

func (obj SendPacketEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SendPacketEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SendPacketEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `PacketData`:
	err = decoder.Decode(&obj.PacketData)
	if err != nil {
		return errors.NewField("PacketData", err)
	}
	return nil
}

func (obj *SendPacketEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SendPacketEvent: %w", err)
	}
	return nil
}

func UnmarshalSendPacketEvent(buf []byte) (*SendPacketEvent, error) {
	obj := new(SendPacketEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type TimeoutPacketEvent struct {
	ClientId   string `json:"clientId"`
	Sequence   uint64 `json:"sequence"`
	PacketData []byte `json:"packetData"`
}

func (obj TimeoutPacketEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `PacketData`:
	err = encoder.Encode(obj.PacketData)
	if err != nil {
		return errors.NewField("PacketData", err)
	}
	return nil
}

func (obj TimeoutPacketEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TimeoutPacketEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TimeoutPacketEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `PacketData`:
	err = decoder.Decode(&obj.PacketData)
	if err != nil {
		return errors.NewField("PacketData", err)
	}
	return nil
}

func (obj *TimeoutPacketEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TimeoutPacketEvent: %w", err)
	}
	return nil
}

func UnmarshalTimeoutPacketEvent(buf []byte) (*TimeoutPacketEvent, error) {
	obj := new(TimeoutPacketEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type WriteAcknowledgementEvent struct {
	ClientId         string   `json:"clientId"`
	Sequence         uint64   `json:"sequence"`
	PacketData       []byte   `json:"packetData"`
	Acknowledgements [][]byte `json:"acknowledgements"`
}

func (obj WriteAcknowledgementEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `PacketData`:
	err = encoder.Encode(obj.PacketData)
	if err != nil {
		return errors.NewField("PacketData", err)
	}
	// Serialize `Acknowledgements`:
	err = encoder.Encode(obj.Acknowledgements)
	if err != nil {
		return errors.NewField("Acknowledgements", err)
	}
	return nil
}

func (obj WriteAcknowledgementEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding WriteAcknowledgementEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *WriteAcknowledgementEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `PacketData`:
	err = decoder.Decode(&obj.PacketData)
	if err != nil {
		return errors.NewField("PacketData", err)
	}
	// Deserialize `Acknowledgements`:
	err = decoder.Decode(&obj.Acknowledgements)
	if err != nil {
		return errors.NewField("Acknowledgements", err)
	}
	return nil
}

func (obj *WriteAcknowledgementEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling WriteAcknowledgementEvent: %w", err)
	}
	return nil
}

func UnmarshalWriteAcknowledgementEvent(buf []byte) (*WriteAcknowledgementEvent, error) {
	obj := new(WriteAcknowledgementEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
