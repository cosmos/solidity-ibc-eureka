// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the accounts defined in the IDL.

package ics26_router

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyAccount(accountData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek account discriminator: %w", err)
	}
	switch discriminator {
	case Account_Ics26RouterStateClient:
		value := new(Ics26RouterStateClient)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Ics26RouterStateClient: %w", err)
		}
		return value, nil
	case Account_Ics26RouterStateClientSequence:
		value := new(Ics26RouterStateClientSequence)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Ics26RouterStateClientSequence: %w", err)
		}
		return value, nil
	case Account_Ics26RouterStateCommitment:
		value := new(Ics26RouterStateCommitment)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Ics26RouterStateCommitment: %w", err)
		}
		return value, nil
	case Account_Ics26RouterStateIbcApp:
		value := new(Ics26RouterStateIbcApp)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Ics26RouterStateIbcApp: %w", err)
		}
		return value, nil
	case Account_Ics26RouterStatePayloadChunk:
		value := new(Ics26RouterStatePayloadChunk)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Ics26RouterStatePayloadChunk: %w", err)
		}
		return value, nil
	case Account_Ics26RouterStateProofChunk:
		value := new(Ics26RouterStateProofChunk)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Ics26RouterStateProofChunk: %w", err)
		}
		return value, nil
	case Account_Ics26RouterStateRouterState:
		value := new(Ics26RouterStateRouterState)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Ics26RouterStateRouterState: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseAccount_Ics26RouterStateClient(accountData []byte) (*Ics26RouterStateClient, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Ics26RouterStateClient {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Ics26RouterStateClient, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Ics26RouterStateClient)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Ics26RouterStateClient: %w", err)
	}
	return acc, nil
}

func ParseAccount_Ics26RouterStateClientSequence(accountData []byte) (*Ics26RouterStateClientSequence, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Ics26RouterStateClientSequence {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Ics26RouterStateClientSequence, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Ics26RouterStateClientSequence)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Ics26RouterStateClientSequence: %w", err)
	}
	return acc, nil
}

func ParseAccount_Ics26RouterStateCommitment(accountData []byte) (*Ics26RouterStateCommitment, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Ics26RouterStateCommitment {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Ics26RouterStateCommitment, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Ics26RouterStateCommitment)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Ics26RouterStateCommitment: %w", err)
	}
	return acc, nil
}

func ParseAccount_Ics26RouterStateIbcApp(accountData []byte) (*Ics26RouterStateIbcApp, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Ics26RouterStateIbcApp {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Ics26RouterStateIbcApp, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Ics26RouterStateIbcApp)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Ics26RouterStateIbcApp: %w", err)
	}
	return acc, nil
}

func ParseAccount_Ics26RouterStatePayloadChunk(accountData []byte) (*Ics26RouterStatePayloadChunk, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Ics26RouterStatePayloadChunk {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Ics26RouterStatePayloadChunk, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Ics26RouterStatePayloadChunk)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Ics26RouterStatePayloadChunk: %w", err)
	}
	return acc, nil
}

func ParseAccount_Ics26RouterStateProofChunk(accountData []byte) (*Ics26RouterStateProofChunk, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Ics26RouterStateProofChunk {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Ics26RouterStateProofChunk, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Ics26RouterStateProofChunk)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Ics26RouterStateProofChunk: %w", err)
	}
	return acc, nil
}

func ParseAccount_Ics26RouterStateRouterState(accountData []byte) (*Ics26RouterStateRouterState, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Ics26RouterStateRouterState {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Ics26RouterStateRouterState, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Ics26RouterStateRouterState)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Ics26RouterStateRouterState: %w", err)
	}
	return acc, nil
}
