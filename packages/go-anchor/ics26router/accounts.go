// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the accounts defined in the IDL.

package ics26_router

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyAccount(accountData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek account discriminator: %w", err)
	}
	switch discriminator {
	case Account_Client:
		value := new(Client)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Client: %w", err)
		}
		return value, nil
	case Account_ClientSequence:
		value := new(ClientSequence)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as ClientSequence: %w", err)
		}
		return value, nil
	case Account_Commitment:
		value := new(Commitment)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as Commitment: %w", err)
		}
		return value, nil
	case Account_IbcApp:
		value := new(IbcApp)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as IbcApp: %w", err)
		}
		return value, nil
	case Account_PayloadChunk:
		value := new(PayloadChunk)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as PayloadChunk: %w", err)
		}
		return value, nil
	case Account_ProofChunk:
		value := new(ProofChunk)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as ProofChunk: %w", err)
		}
		return value, nil
	case Account_RouterState:
		value := new(RouterState)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as RouterState: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseAccount_Client(accountData []byte) (*Client, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Client {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Client, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Client)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Client: %w", err)
	}
	return acc, nil
}

func ParseAccount_ClientSequence(accountData []byte) (*ClientSequence, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_ClientSequence {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_ClientSequence, binary.FormatDiscriminator(discriminator))
	}
	acc := new(ClientSequence)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type ClientSequence: %w", err)
	}
	return acc, nil
}

func ParseAccount_Commitment(accountData []byte) (*Commitment, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_Commitment {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_Commitment, binary.FormatDiscriminator(discriminator))
	}
	acc := new(Commitment)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type Commitment: %w", err)
	}
	return acc, nil
}

func ParseAccount_IbcApp(accountData []byte) (*IbcApp, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_IbcApp {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_IbcApp, binary.FormatDiscriminator(discriminator))
	}
	acc := new(IbcApp)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type IbcApp: %w", err)
	}
	return acc, nil
}

func ParseAccount_PayloadChunk(accountData []byte) (*PayloadChunk, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_PayloadChunk {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_PayloadChunk, binary.FormatDiscriminator(discriminator))
	}
	acc := new(PayloadChunk)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type PayloadChunk: %w", err)
	}
	return acc, nil
}

func ParseAccount_ProofChunk(accountData []byte) (*ProofChunk, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_ProofChunk {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_ProofChunk, binary.FormatDiscriminator(discriminator))
	}
	acc := new(ProofChunk)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type ProofChunk: %w", err)
	}
	return acc, nil
}

func ParseAccount_RouterState(accountData []byte) (*RouterState, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_RouterState {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_RouterState, binary.FormatDiscriminator(discriminator))
	}
	acc := new(RouterState)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type RouterState: %w", err)
	}
	return acc, nil
}
