// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package dummy_ibc_app

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Message for sending an arbitrary packet via IBC
type DummyIbcAppInstructionsSendPacketSendPacketMsg struct {
	// Source client ID for the destination chain
	SourceClient string `json:"sourceClient"`

	// Source port (e.g., "transfer", "oracle", etc.)
	SourcePort string `json:"sourcePort"`

	// Destination port
	DestPort string `json:"destPort"`

	// Version string for the packet
	Version string `json:"version"`

	// Encoding format (e.g., "json", "protobuf")
	Encoding string `json:"encoding"`

	// Arbitrary packet data
	PacketData []byte `json:"packetData"`

	// Timeout timestamp (Unix timestamp in seconds)
	TimeoutTimestamp int64 `json:"timeoutTimestamp"`
}

func (obj DummyIbcAppInstructionsSendPacketSendPacketMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `SourcePort`:
	err = encoder.Encode(obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Serialize `DestPort`:
	err = encoder.Encode(obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Encoding`:
	err = encoder.Encode(obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Serialize `PacketData`:
	err = encoder.Encode(obj.PacketData)
	if err != nil {
		return errors.NewField("PacketData", err)
	}
	// Serialize `TimeoutTimestamp`:
	err = encoder.Encode(obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	return nil
}

func (obj DummyIbcAppInstructionsSendPacketSendPacketMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DummyIbcAppInstructionsSendPacketSendPacketMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DummyIbcAppInstructionsSendPacketSendPacketMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `SourcePort`:
	err = decoder.Decode(&obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Deserialize `DestPort`:
	err = decoder.Decode(&obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Encoding`:
	err = decoder.Decode(&obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Deserialize `PacketData`:
	err = decoder.Decode(&obj.PacketData)
	if err != nil {
		return errors.NewField("PacketData", err)
	}
	// Deserialize `TimeoutTimestamp`:
	err = decoder.Decode(&obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	return nil
}

func (obj *DummyIbcAppInstructionsSendPacketSendPacketMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DummyIbcAppInstructionsSendPacketSendPacketMsg: %w", err)
	}
	return nil
}

func UnmarshalDummyIbcAppInstructionsSendPacketSendPacketMsg(buf []byte) (*DummyIbcAppInstructionsSendPacketSendPacketMsg, error) {
	obj := new(DummyIbcAppInstructionsSendPacketSendPacketMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for sending a transfer via IBC
type DummyIbcAppInstructionsSendTransferSendTransferMsg struct {
	// Token denomination (e.g., "sol", "usdc", etc.)
	Denom string `json:"denom"`

	// Amount to transfer as string (for compatibility with ICS20)
	Amount string `json:"amount"`

	// Receiver address on the destination chain
	Receiver string `json:"receiver"`

	// Source client ID for the destination chain
	SourceClient string `json:"sourceClient"`

	// Destination port (usually "transfer")
	DestPort string `json:"destPort"`

	// Timeout timestamp (Unix timestamp in seconds)
	TimeoutTimestamp int64 `json:"timeoutTimestamp"`

	// Optional memo field
	Memo string `json:"memo"`
}

func (obj DummyIbcAppInstructionsSendTransferSendTransferMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Denom`:
	err = encoder.Encode(obj.Denom)
	if err != nil {
		return errors.NewField("Denom", err)
	}
	// Serialize `Amount`:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Serialize `Receiver`:
	err = encoder.Encode(obj.Receiver)
	if err != nil {
		return errors.NewField("Receiver", err)
	}
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `DestPort`:
	err = encoder.Encode(obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Serialize `TimeoutTimestamp`:
	err = encoder.Encode(obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Serialize `Memo`:
	err = encoder.Encode(obj.Memo)
	if err != nil {
		return errors.NewField("Memo", err)
	}
	return nil
}

func (obj DummyIbcAppInstructionsSendTransferSendTransferMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DummyIbcAppInstructionsSendTransferSendTransferMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DummyIbcAppInstructionsSendTransferSendTransferMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Denom`:
	err = decoder.Decode(&obj.Denom)
	if err != nil {
		return errors.NewField("Denom", err)
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return errors.NewField("Amount", err)
	}
	// Deserialize `Receiver`:
	err = decoder.Decode(&obj.Receiver)
	if err != nil {
		return errors.NewField("Receiver", err)
	}
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `DestPort`:
	err = decoder.Decode(&obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Deserialize `TimeoutTimestamp`:
	err = decoder.Decode(&obj.TimeoutTimestamp)
	if err != nil {
		return errors.NewField("TimeoutTimestamp", err)
	}
	// Deserialize `Memo`:
	err = decoder.Decode(&obj.Memo)
	if err != nil {
		return errors.NewField("Memo", err)
	}
	return nil
}

func (obj *DummyIbcAppInstructionsSendTransferSendTransferMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DummyIbcAppInstructionsSendTransferSendTransferMsg: %w", err)
	}
	return nil
}

func UnmarshalDummyIbcAppInstructionsSendTransferSendTransferMsg(buf []byte) (*DummyIbcAppInstructionsSendTransferSendTransferMsg, error) {
	obj := new(DummyIbcAppInstructionsSendTransferSendTransferMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Dummy IBC App state
type DummyIbcAppStateDummyIbcAppState struct {
	// Authority that can perform restricted operations
	Authority solanago.PublicKey `json:"authority"`

	// Counter for received packets (for testing)
	PacketsReceived uint64 `json:"packetsReceived"`

	// Counter for acknowledged packets (for testing)
	PacketsAcknowledged uint64 `json:"packetsAcknowledged"`

	// Counter for timed out packets (for testing)
	PacketsTimedOut uint64 `json:"packetsTimedOut"`

	// Counter for sent packets (for testing transfers)
	PacketsSent uint64 `json:"packetsSent"`
}

func (obj DummyIbcAppStateDummyIbcAppState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `PacketsReceived`:
	err = encoder.Encode(obj.PacketsReceived)
	if err != nil {
		return errors.NewField("PacketsReceived", err)
	}
	// Serialize `PacketsAcknowledged`:
	err = encoder.Encode(obj.PacketsAcknowledged)
	if err != nil {
		return errors.NewField("PacketsAcknowledged", err)
	}
	// Serialize `PacketsTimedOut`:
	err = encoder.Encode(obj.PacketsTimedOut)
	if err != nil {
		return errors.NewField("PacketsTimedOut", err)
	}
	// Serialize `PacketsSent`:
	err = encoder.Encode(obj.PacketsSent)
	if err != nil {
		return errors.NewField("PacketsSent", err)
	}
	return nil
}

func (obj DummyIbcAppStateDummyIbcAppState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DummyIbcAppStateDummyIbcAppState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DummyIbcAppStateDummyIbcAppState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `PacketsReceived`:
	err = decoder.Decode(&obj.PacketsReceived)
	if err != nil {
		return errors.NewField("PacketsReceived", err)
	}
	// Deserialize `PacketsAcknowledged`:
	err = decoder.Decode(&obj.PacketsAcknowledged)
	if err != nil {
		return errors.NewField("PacketsAcknowledged", err)
	}
	// Deserialize `PacketsTimedOut`:
	err = decoder.Decode(&obj.PacketsTimedOut)
	if err != nil {
		return errors.NewField("PacketsTimedOut", err)
	}
	// Deserialize `PacketsSent`:
	err = decoder.Decode(&obj.PacketsSent)
	if err != nil {
		return errors.NewField("PacketsSent", err)
	}
	return nil
}

func (obj *DummyIbcAppStateDummyIbcAppState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DummyIbcAppStateDummyIbcAppState: %w", err)
	}
	return nil
}

func UnmarshalDummyIbcAppStateDummyIbcAppState(buf []byte) (*DummyIbcAppStateDummyIbcAppState, error) {
	obj := new(DummyIbcAppStateDummyIbcAppState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Escrow state to track SOL held for specific transfers
type DummyIbcAppStateEscrowState struct {
	// Client ID this escrow is for
	ClientId string `json:"clientId"`

	// Total amount currently held in escrow (in lamports)
	TotalEscrowed uint64 `json:"totalEscrowed"`

	// Number of active transfers
	ActiveTransfers uint64 `json:"activeTransfers"`

	// Authority that created this escrow
	Authority solanago.PublicKey `json:"authority"`
}

func (obj DummyIbcAppStateEscrowState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `TotalEscrowed`:
	err = encoder.Encode(obj.TotalEscrowed)
	if err != nil {
		return errors.NewField("TotalEscrowed", err)
	}
	// Serialize `ActiveTransfers`:
	err = encoder.Encode(obj.ActiveTransfers)
	if err != nil {
		return errors.NewField("ActiveTransfers", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	return nil
}

func (obj DummyIbcAppStateEscrowState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding DummyIbcAppStateEscrowState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *DummyIbcAppStateEscrowState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `TotalEscrowed`:
	err = decoder.Decode(&obj.TotalEscrowed)
	if err != nil {
		return errors.NewField("TotalEscrowed", err)
	}
	// Deserialize `ActiveTransfers`:
	err = decoder.Decode(&obj.ActiveTransfers)
	if err != nil {
		return errors.NewField("ActiveTransfers", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	return nil
}

func (obj *DummyIbcAppStateEscrowState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling DummyIbcAppStateEscrowState: %w", err)
	}
	return nil
}

func UnmarshalDummyIbcAppStateEscrowState(buf []byte) (*DummyIbcAppStateEscrowState, error) {
	obj := new(DummyIbcAppStateEscrowState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Account schema version
type Ics26RouterStateAccountVersion binary.BorshEnum

const (
	Ics26RouterStateAccountVersion_V1 Ics26RouterStateAccountVersion = iota
)

func (value Ics26RouterStateAccountVersion) String() string {
	switch value {
	case Ics26RouterStateAccountVersion_V1:
		return "V1"
	default:
		return ""
	}
}

// Client mapping client IDs to light client program IDs
type Ics26RouterStateClient struct {
	// Schema version for upgrades
	Version Ics26RouterStateAccountVersion `json:"version"`

	// The client identifier
	ClientId string `json:"clientId"`

	// The program ID of the light client
	ClientProgramId solanago.PublicKey `json:"clientProgramId"`

	// Counterparty chain information
	CounterpartyInfo Ics26RouterStateCounterpartyInfo `json:"counterpartyInfo"`

	// Authority that registered this client
	Authority solanago.PublicKey `json:"authority"`

	// Whether the client is active
	Active bool `json:"active"`

	// Reserved space for future fields
	Reserved [256]uint8 `json:"reserved"`
}

func (obj Ics26RouterStateClient) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `ClientProgramId`:
	err = encoder.Encode(obj.ClientProgramId)
	if err != nil {
		return errors.NewField("ClientProgramId", err)
	}
	// Serialize `CounterpartyInfo`:
	err = encoder.Encode(obj.CounterpartyInfo)
	if err != nil {
		return errors.NewField("CounterpartyInfo", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `Active`:
	err = encoder.Encode(obj.Active)
	if err != nil {
		return errors.NewField("Active", err)
	}
	// Serialize `Reserved`:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj Ics26RouterStateClient) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics26RouterStateClient: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics26RouterStateClient) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `ClientProgramId`:
	err = decoder.Decode(&obj.ClientProgramId)
	if err != nil {
		return errors.NewField("ClientProgramId", err)
	}
	// Deserialize `CounterpartyInfo`:
	err = decoder.Decode(&obj.CounterpartyInfo)
	if err != nil {
		return errors.NewField("CounterpartyInfo", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `Active`:
	err = decoder.Decode(&obj.Active)
	if err != nil {
		return errors.NewField("Active", err)
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj *Ics26RouterStateClient) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics26RouterStateClient: %w", err)
	}
	return nil
}

func UnmarshalIcs26RouterStateClient(buf []byte) (*Ics26RouterStateClient, error) {
	obj := new(Ics26RouterStateClient)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Client sequence tracking
type Ics26RouterStateClientSequence struct {
	// Schema version for upgrades
	Version Ics26RouterStateAccountVersion `json:"version"`

	// Next sequence number for sending packets
	NextSequenceSend uint64 `json:"nextSequenceSend"`

	// Reserved space for future fields
	Reserved [256]uint8 `json:"reserved"`
}

func (obj Ics26RouterStateClientSequence) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `NextSequenceSend`:
	err = encoder.Encode(obj.NextSequenceSend)
	if err != nil {
		return errors.NewField("NextSequenceSend", err)
	}
	// Serialize `Reserved`:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj Ics26RouterStateClientSequence) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics26RouterStateClientSequence: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics26RouterStateClientSequence) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `NextSequenceSend`:
	err = decoder.Decode(&obj.NextSequenceSend)
	if err != nil {
		return errors.NewField("NextSequenceSend", err)
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj *Ics26RouterStateClientSequence) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics26RouterStateClientSequence: %w", err)
	}
	return nil
}

func UnmarshalIcs26RouterStateClientSequence(buf []byte) (*Ics26RouterStateClientSequence, error) {
	obj := new(Ics26RouterStateClientSequence)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Counterparty chain information
type Ics26RouterStateCounterpartyInfo struct {
	// Client ID on the counterparty chain
	ClientId string `json:"clientId"`

	// Merkle prefix for proof verification
	MerklePrefix [][]byte `json:"merklePrefix"`
}

func (obj Ics26RouterStateCounterpartyInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientId`:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Serialize `MerklePrefix`:
	err = encoder.Encode(obj.MerklePrefix)
	if err != nil {
		return errors.NewField("MerklePrefix", err)
	}
	return nil
}

func (obj Ics26RouterStateCounterpartyInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics26RouterStateCounterpartyInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics26RouterStateCounterpartyInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return errors.NewField("ClientId", err)
	}
	// Deserialize `MerklePrefix`:
	err = decoder.Decode(&obj.MerklePrefix)
	if err != nil {
		return errors.NewField("MerklePrefix", err)
	}
	return nil
}

func (obj *Ics26RouterStateCounterpartyInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics26RouterStateCounterpartyInfo: %w", err)
	}
	return nil
}

func UnmarshalIcs26RouterStateCounterpartyInfo(buf []byte) (*Ics26RouterStateCounterpartyInfo, error) {
	obj := new(Ics26RouterStateCounterpartyInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// `IBCApp` mapping port IDs to IBC app program IDs
type Ics26RouterStateIbcApp struct {
	// Schema version for upgrades
	Version Ics26RouterStateAccountVersion `json:"version"`

	// The port identifier
	PortId string `json:"portId"`

	// The program ID of the IBC application
	AppProgramId solanago.PublicKey `json:"appProgramId"`

	// Authority that registered this port
	Authority solanago.PublicKey `json:"authority"`

	// Reserved space for future fields
	Reserved [256]uint8 `json:"reserved"`
}

func (obj Ics26RouterStateIbcApp) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `PortId`:
	err = encoder.Encode(obj.PortId)
	if err != nil {
		return errors.NewField("PortId", err)
	}
	// Serialize `AppProgramId`:
	err = encoder.Encode(obj.AppProgramId)
	if err != nil {
		return errors.NewField("AppProgramId", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `Reserved`:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj Ics26RouterStateIbcApp) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics26RouterStateIbcApp: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics26RouterStateIbcApp) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `PortId`:
	err = decoder.Decode(&obj.PortId)
	if err != nil {
		return errors.NewField("PortId", err)
	}
	// Deserialize `AppProgramId`:
	err = decoder.Decode(&obj.AppProgramId)
	if err != nil {
		return errors.NewField("AppProgramId", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj *Ics26RouterStateIbcApp) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics26RouterStateIbcApp: %w", err)
	}
	return nil
}

func UnmarshalIcs26RouterStateIbcApp(buf []byte) (*Ics26RouterStateIbcApp, error) {
	obj := new(Ics26RouterStateIbcApp)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Router state account
// TODO: Implement multi-router ACL
type Ics26RouterStateRouterState struct {
	// Schema version for upgrades
	Version Ics26RouterStateAccountVersion `json:"version"`

	// Authority that can perform restricted operations
	Authority solanago.PublicKey `json:"authority"`

	// Reserved space for future fields
	Reserved [256]uint8 `json:"reserved"`
}

func (obj Ics26RouterStateRouterState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `Reserved`:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj Ics26RouterStateRouterState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics26RouterStateRouterState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics26RouterStateRouterState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return errors.NewField("Reserved", err)
	}
	return nil
}

func (obj *Ics26RouterStateRouterState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics26RouterStateRouterState: %w", err)
	}
	return nil
}

func UnmarshalIcs26RouterStateRouterState(buf []byte) (*Ics26RouterStateRouterState, error) {
	obj := new(Ics26RouterStateRouterState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for onAcknowledgementPacket callback
// Sent from router to IBC app when an acknowledgement is received
type SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg struct {
	SourceClient    string                       `json:"sourceClient"`
	DestClient      string                       `json:"destClient"`
	Sequence        uint64                       `json:"sequence"`
	Payload         SolanaIbcTypesAppMsgsPayload `json:"payload"`
	Acknowledgement []byte                       `json:"acknowledgement"`
	Relayer         solanago.PublicKey           `json:"relayer"`
}

func (obj SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `DestClient`:
	err = encoder.Encode(obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `Payload`:
	err = encoder.Encode(obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Serialize `Acknowledgement`:
	err = encoder.Encode(obj.Acknowledgement)
	if err != nil {
		return errors.NewField("Acknowledgement", err)
	}
	// Serialize `Relayer`:
	err = encoder.Encode(obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `DestClient`:
	err = decoder.Decode(&obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `Payload`:
	err = decoder.Decode(&obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Deserialize `Acknowledgement`:
	err = decoder.Decode(&obj.Acknowledgement)
	if err != nil {
		return errors.NewField("Acknowledgement", err)
	}
	// Deserialize `Relayer`:
	err = decoder.Decode(&obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj *SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg(buf []byte) (*SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg, error) {
	obj := new(SolanaIbcTypesAppMsgsOnAcknowledgementPacketMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for onRecvPacket callback
// Sent from router to IBC app when a packet is received
type SolanaIbcTypesAppMsgsOnRecvPacketMsg struct {
	SourceClient string                       `json:"sourceClient"`
	DestClient   string                       `json:"destClient"`
	Sequence     uint64                       `json:"sequence"`
	Payload      SolanaIbcTypesAppMsgsPayload `json:"payload"`
	Relayer      solanago.PublicKey           `json:"relayer"`
}

func (obj SolanaIbcTypesAppMsgsOnRecvPacketMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `DestClient`:
	err = encoder.Encode(obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `Payload`:
	err = encoder.Encode(obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Serialize `Relayer`:
	err = encoder.Encode(obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj SolanaIbcTypesAppMsgsOnRecvPacketMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesAppMsgsOnRecvPacketMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesAppMsgsOnRecvPacketMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `DestClient`:
	err = decoder.Decode(&obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `Payload`:
	err = decoder.Decode(&obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Deserialize `Relayer`:
	err = decoder.Decode(&obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj *SolanaIbcTypesAppMsgsOnRecvPacketMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesAppMsgsOnRecvPacketMsg: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesAppMsgsOnRecvPacketMsg(buf []byte) (*SolanaIbcTypesAppMsgsOnRecvPacketMsg, error) {
	obj := new(SolanaIbcTypesAppMsgsOnRecvPacketMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Message for onTimeoutPacket callback
// Sent from router to IBC app when a packet times out
type SolanaIbcTypesAppMsgsOnTimeoutPacketMsg struct {
	SourceClient string                       `json:"sourceClient"`
	DestClient   string                       `json:"destClient"`
	Sequence     uint64                       `json:"sequence"`
	Payload      SolanaIbcTypesAppMsgsPayload `json:"payload"`
	Relayer      solanago.PublicKey           `json:"relayer"`
}

func (obj SolanaIbcTypesAppMsgsOnTimeoutPacketMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourceClient`:
	err = encoder.Encode(obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Serialize `DestClient`:
	err = encoder.Encode(obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Serialize `Sequence`:
	err = encoder.Encode(obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Serialize `Payload`:
	err = encoder.Encode(obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Serialize `Relayer`:
	err = encoder.Encode(obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj SolanaIbcTypesAppMsgsOnTimeoutPacketMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesAppMsgsOnTimeoutPacketMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesAppMsgsOnTimeoutPacketMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourceClient`:
	err = decoder.Decode(&obj.SourceClient)
	if err != nil {
		return errors.NewField("SourceClient", err)
	}
	// Deserialize `DestClient`:
	err = decoder.Decode(&obj.DestClient)
	if err != nil {
		return errors.NewField("DestClient", err)
	}
	// Deserialize `Sequence`:
	err = decoder.Decode(&obj.Sequence)
	if err != nil {
		return errors.NewField("Sequence", err)
	}
	// Deserialize `Payload`:
	err = decoder.Decode(&obj.Payload)
	if err != nil {
		return errors.NewField("Payload", err)
	}
	// Deserialize `Relayer`:
	err = decoder.Decode(&obj.Relayer)
	if err != nil {
		return errors.NewField("Relayer", err)
	}
	return nil
}

func (obj *SolanaIbcTypesAppMsgsOnTimeoutPacketMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesAppMsgsOnTimeoutPacketMsg: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesAppMsgsOnTimeoutPacketMsg(buf []byte) (*SolanaIbcTypesAppMsgsOnTimeoutPacketMsg, error) {
	obj := new(SolanaIbcTypesAppMsgsOnTimeoutPacketMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Payload structure shared between router and IBC apps
type SolanaIbcTypesAppMsgsPayload struct {
	SourcePort string `json:"sourcePort"`
	DestPort   string `json:"destPort"`
	Version    string `json:"version"`
	Encoding   string `json:"encoding"`
	Value      []byte `json:"value"`
}

func (obj SolanaIbcTypesAppMsgsPayload) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `SourcePort`:
	err = encoder.Encode(obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Serialize `DestPort`:
	err = encoder.Encode(obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Serialize `Version`:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Serialize `Encoding`:
	err = encoder.Encode(obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Serialize `Value`:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj SolanaIbcTypesAppMsgsPayload) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesAppMsgsPayload: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesAppMsgsPayload) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `SourcePort`:
	err = decoder.Decode(&obj.SourcePort)
	if err != nil {
		return errors.NewField("SourcePort", err)
	}
	// Deserialize `DestPort`:
	err = decoder.Decode(&obj.DestPort)
	if err != nil {
		return errors.NewField("DestPort", err)
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return errors.NewField("Version", err)
	}
	// Deserialize `Encoding`:
	err = decoder.Decode(&obj.Encoding)
	if err != nil {
		return errors.NewField("Encoding", err)
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj *SolanaIbcTypesAppMsgsPayload) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesAppMsgsPayload: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesAppMsgsPayload(buf []byte) (*SolanaIbcTypesAppMsgsPayload, error) {
	obj := new(SolanaIbcTypesAppMsgsPayload)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
