// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package dummy_ibc_app

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_PacketAcknowledged:
		value := new(PacketAcknowledged)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as PacketAcknowledged: %w", err)
		}
		return value, nil
	case Event_PacketReceived:
		value := new(PacketReceived)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as PacketReceived: %w", err)
		}
		return value, nil
	case Event_PacketSent:
		value := new(PacketSent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as PacketSent: %w", err)
		}
		return value, nil
	case Event_PacketTimedOut:
		value := new(PacketTimedOut)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as PacketTimedOut: %w", err)
		}
		return value, nil
	case Event_TransferSent:
		value := new(TransferSent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as TransferSent: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_PacketAcknowledged(eventData []byte) (*PacketAcknowledged, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_PacketAcknowledged {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_PacketAcknowledged, binary.FormatDiscriminator(discriminator))
	}
	event := new(PacketAcknowledged)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type PacketAcknowledged: %w", err)
	}
	return event, nil
}

func ParseEvent_PacketReceived(eventData []byte) (*PacketReceived, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_PacketReceived {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_PacketReceived, binary.FormatDiscriminator(discriminator))
	}
	event := new(PacketReceived)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type PacketReceived: %w", err)
	}
	return event, nil
}

func ParseEvent_PacketSent(eventData []byte) (*PacketSent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_PacketSent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_PacketSent, binary.FormatDiscriminator(discriminator))
	}
	event := new(PacketSent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type PacketSent: %w", err)
	}
	return event, nil
}

func ParseEvent_PacketTimedOut(eventData []byte) (*PacketTimedOut, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_PacketTimedOut {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_PacketTimedOut, binary.FormatDiscriminator(discriminator))
	}
	event := new(PacketTimedOut)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type PacketTimedOut: %w", err)
	}
	return event, nil
}

func ParseEvent_TransferSent(eventData []byte) (*TransferSent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_TransferSent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_TransferSent, binary.FormatDiscriminator(discriminator))
	}
	event := new(TransferSent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type TransferSent: %w", err)
	}
	return event, nil
}
