// Code generated by tools/generate-pdas. DO NOT EDIT.
//
// This file is automatically generated from Anchor IDL files.
// Run 'just generate-pda' to regenerate.
//
// DO NOT EDIT THIS FILE MANUALLY.

package solana

import (
	"fmt"

	solanago "github.com/gagliardetto/solana-go"
)

func DummyIbcAppAppStateTransferPDA(programID solanago.PublicKey) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("app_state"), []byte("transfer")},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive DummyIbcAppAppStateTransferPDA PDA: %v", err))
	}
	return pda, bump
}

func DummyIbcAppClientPDA(programID solanago.PublicKey, sourceClient []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("client"), sourceClient},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive DummyIbcAppClientPDA PDA: %v", err))
	}
	return pda, bump
}

func DummyIbcAppClientSequencePDA(programID solanago.PublicKey, sourceClient []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("client_sequence"), sourceClient},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive DummyIbcAppClientSequencePDA PDA: %v", err))
	}
	return pda, bump
}

func DummyIbcAppEscrowPDA(programID solanago.PublicKey, sourceClient []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("escrow"), sourceClient},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive DummyIbcAppEscrowPDA PDA: %v", err))
	}
	return pda, bump
}

func DummyIbcAppEscrowStatePDA(programID solanago.PublicKey, sourceClient []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("escrow_state"), sourceClient},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive DummyIbcAppEscrowStatePDA PDA: %v", err))
	}
	return pda, bump
}

func DummyIbcAppIbcAppPDA(programID solanago.PublicKey, sourcePort []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("ibc_app"), sourcePort},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive DummyIbcAppIbcAppPDA PDA: %v", err))
	}
	return pda, bump
}

func DummyIbcAppIbcAppTransferPDA(programID solanago.PublicKey) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("ibc_app"), []byte("transfer")},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive DummyIbcAppIbcAppTransferPDA PDA: %v", err))
	}
	return pda, bump
}

func DummyIbcAppRouterCallerPDA(programID solanago.PublicKey) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("router_caller")},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive DummyIbcAppRouterCallerPDA PDA: %v", err))
	}
	return pda, bump
}

func DummyIbcAppRouterStatePDA(programID solanago.PublicKey) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("router_state")},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive DummyIbcAppRouterStatePDA PDA: %v", err))
	}
	return pda, bump
}

func GmpCounterAppCounterAppStatePDA(programID solanago.PublicKey) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("counter_app_state")},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive GmpCounterAppCounterAppStatePDA PDA: %v", err))
	}
	return pda, bump
}

func GmpCounterAppUserCounterPDA(programID solanago.PublicKey, user []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("user_counter"), user},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive GmpCounterAppUserCounterPDA PDA: %v", err))
	}
	return pda, bump
}

func GmpCounterAppUserCounterWithAccountSeedPDA(programID solanago.PublicKey, userAuthority []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("user_counter"), userAuthority},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive GmpCounterAppUserCounterWithAccountSeedPDA PDA: %v", err))
	}
	return pda, bump
}

func Ics07TendermintClientPDA(programID solanago.PublicKey, chainId []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("client"), chainId},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive Ics07TendermintClientPDA PDA: %v", err))
	}
	return pda, bump
}

func Ics07TendermintConsensusStatePDA(programID solanago.PublicKey, clientState []byte, latestHeight []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("consensus_state"), clientState, latestHeight},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive Ics07TendermintConsensusStatePDA PDA: %v", err))
	}
	return pda, bump
}

func Ics26RouterClientPDA(programID solanago.PublicKey, sourceClient []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("client"), sourceClient},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive Ics26RouterClientPDA PDA: %v", err))
	}
	return pda, bump
}

func Ics26RouterClientSequencePDA(programID solanago.PublicKey, clientId []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("client_sequence"), clientId},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive Ics26RouterClientSequencePDA PDA: %v", err))
	}
	return pda, bump
}

func Ics26RouterIbcAppPDA(programID solanago.PublicKey, portId []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("ibc_app"), portId},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive Ics26RouterIbcAppPDA PDA: %v", err))
	}
	return pda, bump
}

func Ics26RouterPacketAckPDA(programID solanago.PublicKey, destClient []byte, sequence []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("packet_ack"), destClient, sequence},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive Ics26RouterPacketAckPDA PDA: %v", err))
	}
	return pda, bump
}

func Ics26RouterPacketCommitmentPDA(programID solanago.PublicKey, sourceClient []byte, sequence []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("packet_commitment"), sourceClient, sequence},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive Ics26RouterPacketCommitmentPDA PDA: %v", err))
	}
	return pda, bump
}

func Ics26RouterPacketCommitmentWithAccountSeedPDA(programID solanago.PublicKey, sourceClient []byte, nextSequenceSend []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("packet_commitment"), sourceClient, nextSequenceSend},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive Ics26RouterPacketCommitmentWithAccountSeedPDA PDA: %v", err))
	}
	return pda, bump
}

func Ics26RouterPacketReceiptPDA(programID solanago.PublicKey, destClient []byte, sequence []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("packet_receipt"), destClient, sequence},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive Ics26RouterPacketReceiptPDA PDA: %v", err))
	}
	return pda, bump
}

func Ics26RouterRouterStatePDA(programID solanago.PublicKey) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("router_state")},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive Ics26RouterRouterStatePDA PDA: %v", err))
	}
	return pda, bump
}

func Ics27GmpAppStateGmpportPDA(programID solanago.PublicKey) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("app_state"), []byte("gmpport")},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive Ics27GmpAppStateGmpportPDA PDA: %v", err))
	}
	return pda, bump
}

func Ics27GmpRouterCallerPDA(programID solanago.PublicKey) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("router_caller")},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive Ics27GmpRouterCallerPDA PDA: %v", err))
	}
	return pda, bump
}

func MockLightClientClientPDA(programID solanago.PublicKey, chainId []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("client"), chainId},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive MockLightClientClientPDA PDA: %v", err))
	}
	return pda, bump
}

func MockLightClientConsensusStatePDA(programID solanago.PublicKey, clientState []byte, latestHeight []byte) (solanago.PublicKey, uint8) {
	pda, bump, err := solanago.FindProgramAddress(
		[][]byte{[]byte("consensus_state"), clientState, latestHeight},
		programID,
	)
	if err != nil {
		panic(fmt.Sprintf("failed to derive MockLightClientConsensusStatePDA PDA: %v", err))
	}
	return pda, bump
}

