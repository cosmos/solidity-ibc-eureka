// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package gmp_counter_app

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Global counter app state
type CounterAppState struct {
	// Authority that can manage the app
	Authority solanago.PublicKey `json:"authority"`

	// Total number of user counters created
	TotalCounters uint64 `json:"totalCounters"`

	// Total number of GMP calls processed
	TotalGmpCalls uint64 `json:"totalGmpCalls"`

	// Program bump seed
	Bump uint8 `json:"bump"`
}

func (obj CounterAppState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Authority`:
	err = encoder.Encode(obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Serialize `TotalCounters`:
	err = encoder.Encode(obj.TotalCounters)
	if err != nil {
		return errors.NewField("TotalCounters", err)
	}
	// Serialize `TotalGmpCalls`:
	err = encoder.Encode(obj.TotalGmpCalls)
	if err != nil {
		return errors.NewField("TotalGmpCalls", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj CounterAppState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CounterAppState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CounterAppState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Authority`:
	err = decoder.Decode(&obj.Authority)
	if err != nil {
		return errors.NewField("Authority", err)
	}
	// Deserialize `TotalCounters`:
	err = decoder.Decode(&obj.TotalCounters)
	if err != nil {
		return errors.NewField("TotalCounters", err)
	}
	// Deserialize `TotalGmpCalls`:
	err = decoder.Decode(&obj.TotalGmpCalls)
	if err != nil {
		return errors.NewField("TotalGmpCalls", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj *CounterAppState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CounterAppState: %w", err)
	}
	return nil
}

func UnmarshalCounterAppState(buf []byte) (*CounterAppState, error) {
	obj := new(CounterAppState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Per-user counter state
type UserCounter struct {
	// User's public key
	User solanago.PublicKey `json:"user"`

	// Current counter value
	Count uint64 `json:"count"`

	// Number of increments
	Increments uint64 `json:"increments"`

	// Number of decrements
	Decrements uint64 `json:"decrements"`

	// Last updated timestamp
	LastUpdated int64 `json:"lastUpdated"`

	// PDA bump seed
	Bump uint8 `json:"bump"`
}

func (obj UserCounter) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `User`:
	err = encoder.Encode(obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Serialize `Count`:
	err = encoder.Encode(obj.Count)
	if err != nil {
		return errors.NewField("Count", err)
	}
	// Serialize `Increments`:
	err = encoder.Encode(obj.Increments)
	if err != nil {
		return errors.NewField("Increments", err)
	}
	// Serialize `Decrements`:
	err = encoder.Encode(obj.Decrements)
	if err != nil {
		return errors.NewField("Decrements", err)
	}
	// Serialize `LastUpdated`:
	err = encoder.Encode(obj.LastUpdated)
	if err != nil {
		return errors.NewField("LastUpdated", err)
	}
	// Serialize `Bump`:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj UserCounter) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding UserCounter: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *UserCounter) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `User`:
	err = decoder.Decode(&obj.User)
	if err != nil {
		return errors.NewField("User", err)
	}
	// Deserialize `Count`:
	err = decoder.Decode(&obj.Count)
	if err != nil {
		return errors.NewField("Count", err)
	}
	// Deserialize `Increments`:
	err = decoder.Decode(&obj.Increments)
	if err != nil {
		return errors.NewField("Increments", err)
	}
	// Deserialize `Decrements`:
	err = decoder.Decode(&obj.Decrements)
	if err != nil {
		return errors.NewField("Decrements", err)
	}
	// Deserialize `LastUpdated`:
	err = decoder.Decode(&obj.LastUpdated)
	if err != nil {
		return errors.NewField("LastUpdated", err)
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return errors.NewField("Bump", err)
	}
	return nil
}

func (obj *UserCounter) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling UserCounter: %w", err)
	}
	return nil
}

func UnmarshalUserCounter(buf []byte) (*UserCounter, error) {
	obj := new(UserCounter)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
