// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains instructions.

package mock_light_client

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Builds a "initialize" instruction.
func NewInitializeInstruction(
	// Params:
	chainIdParam string,
	latestHeightParam uint64,
	clientStateParam []byte,
	consensusStateParam []byte,

	// Accounts:
	clientStateAccount solanago.PublicKey,
	consensusStateStoreAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_Initialize[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `chainIdParam`:
		err = enc__.Encode(chainIdParam)
		if err != nil {
			return nil, errors.NewField("chainIdParam", err)
		}
		// Serialize `latestHeightParam`:
		err = enc__.Encode(latestHeightParam)
		if err != nil {
			return nil, errors.NewField("latestHeightParam", err)
		}
		// Serialize `clientStateParam`:
		err = enc__.Encode(clientStateParam)
		if err != nil {
			return nil, errors.NewField("clientStateParam", err)
		}
		// Serialize `consensusStateParam`:
		err = enc__.Encode(consensusStateParam)
		if err != nil {
			return nil, errors.NewField("consensusStateParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "client_state": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(clientStateAccount, true, false))
		// Account 1 "consensus_state_store": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(consensusStateStoreAccount, true, false))
		// Account 2 "payer": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 3 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "update_client" instruction.
func NewUpdateClientInstruction(
	// Params:
	msgParam UpdateClientMsg,

	// Accounts:
	clientStateAccount solanago.PublicKey,
	trustedConsensusStateAccount solanago.PublicKey,
	newConsensusStateAccount solanago.PublicKey,
	payerAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_UpdateClient[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `msgParam`:
		err = enc__.Encode(msgParam)
		if err != nil {
			return nil, errors.NewField("msgParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "client_state": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(clientStateAccount, false, false))
		// Account 1 "trusted_consensus_state": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(trustedConsensusStateAccount, false, false))
		// Account 2 "new_consensus_state": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(newConsensusStateAccount, false, false))
		// Account 3 "payer": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(payerAccount, false, false))
		// Account 4 "system_program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "verify_membership" instruction.
func NewVerifyMembershipInstruction(
	// Params:
	msgParam MembershipMsg,

	// Accounts:
	clientStateAccount solanago.PublicKey,
	consensusStateAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_VerifyMembership[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `msgParam`:
		err = enc__.Encode(msgParam)
		if err != nil {
			return nil, errors.NewField("msgParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "client_state": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(clientStateAccount, false, false))
		// Account 1 "consensus_state": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(consensusStateAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "verify_non_membership" instruction.
func NewVerifyNonMembershipInstruction(
	// Params:
	msgParam MembershipMsg,

	// Accounts:
	clientStateAccount solanago.PublicKey,
	consensusStateAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_VerifyNonMembership[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `msgParam`:
		err = enc__.Encode(msgParam)
		if err != nil {
			return nil, errors.NewField("msgParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "client_state": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(clientStateAccount, false, false))
		// Account 1 "consensus_state": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(consensusStateAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}
