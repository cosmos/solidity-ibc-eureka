// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package mock_light_client

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
)

// Standard message structure for membership verification
// All light clients must accept this structure for both membership and non-membership proofs
type Ics25HandlerMembershipMsg struct {
	// The height at which to verify
	Height uint64 `json:"height"`

	// Delay time period (for time-based delays)
	DelayTimePeriod uint64 `json:"delayTimePeriod"`

	// Delay block period (for block-based delays)
	DelayBlockPeriod uint64 `json:"delayBlockPeriod"`

	// The merkle proof
	Proof []byte `json:"proof"`

	// The merkle path to the value
	Path [][]byte `json:"path"`

	// The value to verify (empty for non-membership)
	Value []byte `json:"value"`
}

func (obj Ics25HandlerMembershipMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Height`:
	err = encoder.Encode(obj.Height)
	if err != nil {
		return errors.NewField("Height", err)
	}
	// Serialize `DelayTimePeriod`:
	err = encoder.Encode(obj.DelayTimePeriod)
	if err != nil {
		return errors.NewField("DelayTimePeriod", err)
	}
	// Serialize `DelayBlockPeriod`:
	err = encoder.Encode(obj.DelayBlockPeriod)
	if err != nil {
		return errors.NewField("DelayBlockPeriod", err)
	}
	// Serialize `Proof`:
	err = encoder.Encode(obj.Proof)
	if err != nil {
		return errors.NewField("Proof", err)
	}
	// Serialize `Path`:
	err = encoder.Encode(obj.Path)
	if err != nil {
		return errors.NewField("Path", err)
	}
	// Serialize `Value`:
	err = encoder.Encode(obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj Ics25HandlerMembershipMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding Ics25HandlerMembershipMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *Ics25HandlerMembershipMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Height`:
	err = decoder.Decode(&obj.Height)
	if err != nil {
		return errors.NewField("Height", err)
	}
	// Deserialize `DelayTimePeriod`:
	err = decoder.Decode(&obj.DelayTimePeriod)
	if err != nil {
		return errors.NewField("DelayTimePeriod", err)
	}
	// Deserialize `DelayBlockPeriod`:
	err = decoder.Decode(&obj.DelayBlockPeriod)
	if err != nil {
		return errors.NewField("DelayBlockPeriod", err)
	}
	// Deserialize `Proof`:
	err = decoder.Decode(&obj.Proof)
	if err != nil {
		return errors.NewField("Proof", err)
	}
	// Deserialize `Path`:
	err = decoder.Decode(&obj.Path)
	if err != nil {
		return errors.NewField("Path", err)
	}
	// Deserialize `Value`:
	err = decoder.Decode(&obj.Value)
	if err != nil {
		return errors.NewField("Value", err)
	}
	return nil
}

func (obj *Ics25HandlerMembershipMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling Ics25HandlerMembershipMsg: %w", err)
	}
	return nil
}

func UnmarshalIcs25HandlerMembershipMsg(buf []byte) (*Ics25HandlerMembershipMsg, error) {
	obj := new(Ics25HandlerMembershipMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Update client message for ICS07 Tendermint
type SolanaIbcTypesIcs07UpdateClientMsg struct {
	ClientMessage []byte `json:"clientMessage"`
}

func (obj SolanaIbcTypesIcs07UpdateClientMsg) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `ClientMessage`:
	err = encoder.Encode(obj.ClientMessage)
	if err != nil {
		return errors.NewField("ClientMessage", err)
	}
	return nil
}

func (obj SolanaIbcTypesIcs07UpdateClientMsg) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding SolanaIbcTypesIcs07UpdateClientMsg: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *SolanaIbcTypesIcs07UpdateClientMsg) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `ClientMessage`:
	err = decoder.Decode(&obj.ClientMessage)
	if err != nil {
		return errors.NewField("ClientMessage", err)
	}
	return nil
}

func (obj *SolanaIbcTypesIcs07UpdateClientMsg) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling SolanaIbcTypesIcs07UpdateClientMsg: %w", err)
	}
	return nil
}

func UnmarshalSolanaIbcTypesIcs07UpdateClientMsg(buf []byte) (*SolanaIbcTypesIcs07UpdateClientMsg, error) {
	obj := new(SolanaIbcTypesIcs07UpdateClientMsg)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
