// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: relayer/relayer.proto

package relayer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The relay by tx request message
type RelayByTxRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source chain identifier
	SrcChain string `protobuf:"bytes,1,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	// The target chain identifier
	DstChain string `protobuf:"bytes,2,opt,name=dst_chain,json=dstChain,proto3" json:"dst_chain,omitempty"`
	// The identifiers for the IBC transactions to be relayed
	// This is usually the transaction hash
	SourceTxIds [][]byte `protobuf:"bytes,3,rep,name=source_tx_ids,json=sourceTxIds,proto3" json:"source_tx_ids,omitempty"`
	// The identifiers for the IBC transactions on the target chain to be timed out
	TimeoutTxIds [][]byte `protobuf:"bytes,4,rep,name=timeout_tx_ids,json=timeoutTxIds,proto3" json:"timeout_tx_ids,omitempty"`
	// The identifier for the source client
	// Used for event filtering
	SrcClientId string `protobuf:"bytes,5,opt,name=src_client_id,json=srcClientId,proto3" json:"src_client_id,omitempty"`
	// The identifier for the destination client
	// Used for event filtering
	DstClientId string `protobuf:"bytes,6,opt,name=dst_client_id,json=dstClientId,proto3" json:"dst_client_id,omitempty"`
	// The optional source chain send packet sequences for recv packets
	// Used for event filtering, no filtering if empty
	SrcPacketSequences []uint64 `protobuf:"varint,7,rep,packed,name=src_packet_sequences,json=srcPacketSequences,proto3" json:"src_packet_sequences,omitempty"`
	// The optional destination chain send packet sequences for acks and timeouts
	// Used for event filtering, no filtering if empty
	DstPacketSequences []uint64 `protobuf:"varint,8,rep,packed,name=dst_packet_sequences,json=dstPacketSequences,proto3" json:"dst_packet_sequences,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RelayByTxRequest) Reset() {
	*x = RelayByTxRequest{}
	mi := &file_relayer_relayer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelayByTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayByTxRequest) ProtoMessage() {}

func (x *RelayByTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_relayer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayByTxRequest.ProtoReflect.Descriptor instead.
func (*RelayByTxRequest) Descriptor() ([]byte, []int) {
	return file_relayer_relayer_proto_rawDescGZIP(), []int{0}
}

func (x *RelayByTxRequest) GetSrcChain() string {
	if x != nil {
		return x.SrcChain
	}
	return ""
}

func (x *RelayByTxRequest) GetDstChain() string {
	if x != nil {
		return x.DstChain
	}
	return ""
}

func (x *RelayByTxRequest) GetSourceTxIds() [][]byte {
	if x != nil {
		return x.SourceTxIds
	}
	return nil
}

func (x *RelayByTxRequest) GetTimeoutTxIds() [][]byte {
	if x != nil {
		return x.TimeoutTxIds
	}
	return nil
}

func (x *RelayByTxRequest) GetSrcClientId() string {
	if x != nil {
		return x.SrcClientId
	}
	return ""
}

func (x *RelayByTxRequest) GetDstClientId() string {
	if x != nil {
		return x.DstClientId
	}
	return ""
}

func (x *RelayByTxRequest) GetSrcPacketSequences() []uint64 {
	if x != nil {
		return x.SrcPacketSequences
	}
	return nil
}

func (x *RelayByTxRequest) GetDstPacketSequences() []uint64 {
	if x != nil {
		return x.DstPacketSequences
	}
	return nil
}

// Transaction batch wrapper for multiple transactions
type TransactionBatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of transaction bytes
	Txs           [][]byte `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionBatch) Reset() {
	*x = TransactionBatch{}
	mi := &file_relayer_relayer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBatch) ProtoMessage() {}

func (x *TransactionBatch) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_relayer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBatch.ProtoReflect.Descriptor instead.
func (*TransactionBatch) Descriptor() ([]byte, []int) {
	return file_relayer_relayer_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionBatch) GetTxs() [][]byte {
	if x != nil {
		return x.Txs
	}
	return nil
}

// Transactions for a single packet (chunks + final instruction)
type PacketTransactions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Chunk upload transactions (can be submitted in parallel)
	Chunks [][]byte `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
	// Final packet transaction (recv_packet, ack_packet, or timeout_packet)
	FinalTx       []byte `protobuf:"bytes,2,opt,name=final_tx,json=finalTx,proto3" json:"final_tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketTransactions) Reset() {
	*x = PacketTransactions{}
	mi := &file_relayer_relayer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketTransactions) ProtoMessage() {}

func (x *PacketTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_relayer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketTransactions.ProtoReflect.Descriptor instead.
func (*PacketTransactions) Descriptor() ([]byte, []int) {
	return file_relayer_relayer_proto_rawDescGZIP(), []int{2}
}

func (x *PacketTransactions) GetChunks() [][]byte {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *PacketTransactions) GetFinalTx() []byte {
	if x != nil {
		return x.FinalTx
	}
	return nil
}

// Batch of packet transactions for relay operations
type RelayPacketBatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of packet transactions
	Packets       []*PacketTransactions `protobuf:"bytes,1,rep,name=packets,proto3" json:"packets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelayPacketBatch) Reset() {
	*x = RelayPacketBatch{}
	mi := &file_relayer_relayer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelayPacketBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayPacketBatch) ProtoMessage() {}

func (x *RelayPacketBatch) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_relayer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayPacketBatch.ProtoReflect.Descriptor instead.
func (*RelayPacketBatch) Descriptor() ([]byte, []int) {
	return file_relayer_relayer_proto_rawDescGZIP(), []int{3}
}

func (x *RelayPacketBatch) GetPackets() []*PacketTransactions {
	if x != nil {
		return x.Packets
	}
	return nil
}

// The relay by tx response message
type RelayByTxResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transaction(s) to be submitted by caller.
	// For single transactions: contains the raw transaction bytes
	// For multiple transactions (e.g., Solana chunks): contains serialized TransactionBatch
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// The contract address to submit the transaction, if applicable
	Address       string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelayByTxResponse) Reset() {
	*x = RelayByTxResponse{}
	mi := &file_relayer_relayer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelayByTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayByTxResponse) ProtoMessage() {}

func (x *RelayByTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_relayer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayByTxResponse.ProtoReflect.Descriptor instead.
func (*RelayByTxResponse) Descriptor() ([]byte, []int) {
	return file_relayer_relayer_proto_rawDescGZIP(), []int{4}
}

func (x *RelayByTxResponse) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *RelayByTxResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// The create client request message
type CreateClientRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source chain identifier
	SrcChain string `protobuf:"bytes,1,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	// The target chain identifier
	DstChain string `protobuf:"bytes,2,opt,name=dst_chain,json=dstChain,proto3" json:"dst_chain,omitempty"`
	// Optional genesis parameters
	Parameters    map[string]string `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClientRequest) Reset() {
	*x = CreateClientRequest{}
	mi := &file_relayer_relayer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientRequest) ProtoMessage() {}

func (x *CreateClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_relayer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientRequest.ProtoReflect.Descriptor instead.
func (*CreateClientRequest) Descriptor() ([]byte, []int) {
	return file_relayer_relayer_proto_rawDescGZIP(), []int{5}
}

func (x *CreateClientRequest) GetSrcChain() string {
	if x != nil {
		return x.SrcChain
	}
	return ""
}

func (x *CreateClientRequest) GetDstChain() string {
	if x != nil {
		return x.DstChain
	}
	return ""
}

func (x *CreateClientRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// The create client response message
type CreateClientResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The transaction to be submitted by caller
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// The contract address to submit the transaction, if applicable
	Address       string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClientResponse) Reset() {
	*x = CreateClientResponse{}
	mi := &file_relayer_relayer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientResponse) ProtoMessage() {}

func (x *CreateClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_relayer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientResponse.ProtoReflect.Descriptor instead.
func (*CreateClientResponse) Descriptor() ([]byte, []int) {
	return file_relayer_relayer_proto_rawDescGZIP(), []int{6}
}

func (x *CreateClientResponse) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *CreateClientResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// The update client request message
type UpdateClientRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source chain identifier
	SrcChain string `protobuf:"bytes,1,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	// The target chain identifier
	DstChain string `protobuf:"bytes,2,opt,name=dst_chain,json=dstChain,proto3" json:"dst_chain,omitempty"`
	// The identifier for the client on the destination chain
	DstClientId   string `protobuf:"bytes,3,opt,name=dst_client_id,json=dstClientId,proto3" json:"dst_client_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClientRequest) Reset() {
	*x = UpdateClientRequest{}
	mi := &file_relayer_relayer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientRequest) ProtoMessage() {}

func (x *UpdateClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_relayer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientRequest.ProtoReflect.Descriptor instead.
func (*UpdateClientRequest) Descriptor() ([]byte, []int) {
	return file_relayer_relayer_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateClientRequest) GetSrcChain() string {
	if x != nil {
		return x.SrcChain
	}
	return ""
}

func (x *UpdateClientRequest) GetDstChain() string {
	if x != nil {
		return x.DstChain
	}
	return ""
}

func (x *UpdateClientRequest) GetDstClientId() string {
	if x != nil {
		return x.DstClientId
	}
	return ""
}

// The update client response message
type UpdateClientResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transaction(s) to be submitted by caller.
	// For single transactions: contains the raw transaction bytes
	// For multiple transactions (e.g., Solana chunks): contains serialized TransactionBatch
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// The contract address to submit the transaction, if applicable
	Address       string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClientResponse) Reset() {
	*x = UpdateClientResponse{}
	mi := &file_relayer_relayer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientResponse) ProtoMessage() {}

func (x *UpdateClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_relayer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientResponse.ProtoReflect.Descriptor instead.
func (*UpdateClientResponse) Descriptor() ([]byte, []int) {
	return file_relayer_relayer_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateClientResponse) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *UpdateClientResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Information request message
type InfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source chain identifier
	SrcChain string `protobuf:"bytes,1,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	// The target chain identifier
	DstChain      string `protobuf:"bytes,2,opt,name=dst_chain,json=dstChain,proto3" json:"dst_chain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	mi := &file_relayer_relayer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_relayer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_relayer_relayer_proto_rawDescGZIP(), []int{9}
}

func (x *InfoRequest) GetSrcChain() string {
	if x != nil {
		return x.SrcChain
	}
	return ""
}

func (x *InfoRequest) GetDstChain() string {
	if x != nil {
		return x.DstChain
	}
	return ""
}

// Information response message
type InfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The target chain information
	TargetChain *Chain `protobuf:"bytes,1,opt,name=target_chain,json=targetChain,proto3" json:"target_chain,omitempty"`
	// The source chain information
	SourceChain *Chain `protobuf:"bytes,2,opt,name=source_chain,json=sourceChain,proto3" json:"source_chain,omitempty"`
	// Metadata for the module
	Metadata      map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InfoResponse) Reset() {
	*x = InfoResponse{}
	mi := &file_relayer_relayer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse) ProtoMessage() {}

func (x *InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_relayer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse.ProtoReflect.Descriptor instead.
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return file_relayer_relayer_proto_rawDescGZIP(), []int{10}
}

func (x *InfoResponse) GetTargetChain() *Chain {
	if x != nil {
		return x.TargetChain
	}
	return nil
}

func (x *InfoResponse) GetSourceChain() *Chain {
	if x != nil {
		return x.SourceChain
	}
	return nil
}

func (x *InfoResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// The chain definition
type Chain struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The chain id
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The ibc version
	IbcVersion string `protobuf:"bytes,2,opt,name=ibc_version,json=ibcVersion,proto3" json:"ibc_version,omitempty"`
	// The ibc contract address
	IbcContract   string `protobuf:"bytes,3,opt,name=ibc_contract,json=ibcContract,proto3" json:"ibc_contract,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Chain) Reset() {
	*x = Chain{}
	mi := &file_relayer_relayer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_relayer_relayer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_relayer_relayer_proto_rawDescGZIP(), []int{11}
}

func (x *Chain) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *Chain) GetIbcVersion() string {
	if x != nil {
		return x.IbcVersion
	}
	return ""
}

func (x *Chain) GetIbcContract() string {
	if x != nil {
		return x.IbcContract
	}
	return ""
}

var File_relayer_relayer_proto protoreflect.FileDescriptor

const file_relayer_relayer_proto_rawDesc = "" +
	"\n" +
	"\x15relayer/relayer.proto\x12\arelayer\"\xc2\x02\n" +
	"\x10RelayByTxRequest\x12\x1b\n" +
	"\tsrc_chain\x18\x01 \x01(\tR\bsrcChain\x12\x1b\n" +
	"\tdst_chain\x18\x02 \x01(\tR\bdstChain\x12\"\n" +
	"\rsource_tx_ids\x18\x03 \x03(\fR\vsourceTxIds\x12$\n" +
	"\x0etimeout_tx_ids\x18\x04 \x03(\fR\ftimeoutTxIds\x12\"\n" +
	"\rsrc_client_id\x18\x05 \x01(\tR\vsrcClientId\x12\"\n" +
	"\rdst_client_id\x18\x06 \x01(\tR\vdstClientId\x120\n" +
	"\x14src_packet_sequences\x18\a \x03(\x04R\x12srcPacketSequences\x120\n" +
	"\x14dst_packet_sequences\x18\b \x03(\x04R\x12dstPacketSequences\"$\n" +
	"\x10TransactionBatch\x12\x10\n" +
	"\x03txs\x18\x01 \x03(\fR\x03txs\"G\n" +
	"\x12PacketTransactions\x12\x16\n" +
	"\x06chunks\x18\x01 \x03(\fR\x06chunks\x12\x19\n" +
	"\bfinal_tx\x18\x02 \x01(\fR\afinalTx\"I\n" +
	"\x10RelayPacketBatch\x125\n" +
	"\apackets\x18\x01 \x03(\v2\x1b.relayer.PacketTransactionsR\apackets\"=\n" +
	"\x11RelayByTxResponse\x12\x0e\n" +
	"\x02tx\x18\x01 \x01(\fR\x02tx\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\"\xdc\x01\n" +
	"\x13CreateClientRequest\x12\x1b\n" +
	"\tsrc_chain\x18\x01 \x01(\tR\bsrcChain\x12\x1b\n" +
	"\tdst_chain\x18\x02 \x01(\tR\bdstChain\x12L\n" +
	"\n" +
	"parameters\x18\x03 \x03(\v2,.relayer.CreateClientRequest.ParametersEntryR\n" +
	"parameters\x1a=\n" +
	"\x0fParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"@\n" +
	"\x14CreateClientResponse\x12\x0e\n" +
	"\x02tx\x18\x01 \x01(\fR\x02tx\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\"s\n" +
	"\x13UpdateClientRequest\x12\x1b\n" +
	"\tsrc_chain\x18\x01 \x01(\tR\bsrcChain\x12\x1b\n" +
	"\tdst_chain\x18\x02 \x01(\tR\bdstChain\x12\"\n" +
	"\rdst_client_id\x18\x03 \x01(\tR\vdstClientId\"@\n" +
	"\x14UpdateClientResponse\x12\x0e\n" +
	"\x02tx\x18\x01 \x01(\fR\x02tx\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\"G\n" +
	"\vInfoRequest\x12\x1b\n" +
	"\tsrc_chain\x18\x01 \x01(\tR\bsrcChain\x12\x1b\n" +
	"\tdst_chain\x18\x02 \x01(\tR\bdstChain\"\xf2\x01\n" +
	"\fInfoResponse\x121\n" +
	"\ftarget_chain\x18\x01 \x01(\v2\x0e.relayer.ChainR\vtargetChain\x121\n" +
	"\fsource_chain\x18\x02 \x01(\v2\x0e.relayer.ChainR\vsourceChain\x12?\n" +
	"\bmetadata\x18\x03 \x03(\v2#.relayer.InfoResponse.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"f\n" +
	"\x05Chain\x12\x19\n" +
	"\bchain_id\x18\x01 \x01(\tR\achainId\x12\x1f\n" +
	"\vibc_version\x18\x02 \x01(\tR\n" +
	"ibcVersion\x12!\n" +
	"\fibc_contract\x18\x03 \x01(\tR\vibcContract2\xa3\x02\n" +
	"\x0eRelayerService\x12B\n" +
	"\tRelayByTx\x12\x19.relayer.RelayByTxRequest\x1a\x1a.relayer.RelayByTxResponse\x12K\n" +
	"\fCreateClient\x12\x1c.relayer.CreateClientRequest\x1a\x1d.relayer.CreateClientResponse\x12K\n" +
	"\fUpdateClient\x12\x1c.relayer.UpdateClientRequest\x1a\x1d.relayer.UpdateClientResponse\x123\n" +
	"\x04Info\x12\x14.relayer.InfoRequest\x1a\x15.relayer.InfoResponseBf\n" +
	"\vcom.relayerB\fRelayerProtoP\x01Z\rtypes/relayer\xa2\x02\x03RXX\xaa\x02\aRelayer\xca\x02\aRelayer\xe2\x02\x13Relayer\\GPBMetadata\xea\x02\aRelayerb\x06proto3"

var (
	file_relayer_relayer_proto_rawDescOnce sync.Once
	file_relayer_relayer_proto_rawDescData []byte
)

func file_relayer_relayer_proto_rawDescGZIP() []byte {
	file_relayer_relayer_proto_rawDescOnce.Do(func() {
		file_relayer_relayer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_relayer_relayer_proto_rawDesc), len(file_relayer_relayer_proto_rawDesc)))
	})
	return file_relayer_relayer_proto_rawDescData
}

var file_relayer_relayer_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_relayer_relayer_proto_goTypes = []any{
	(*RelayByTxRequest)(nil),     // 0: relayer.RelayByTxRequest
	(*TransactionBatch)(nil),     // 1: relayer.TransactionBatch
	(*PacketTransactions)(nil),   // 2: relayer.PacketTransactions
	(*RelayPacketBatch)(nil),     // 3: relayer.RelayPacketBatch
	(*RelayByTxResponse)(nil),    // 4: relayer.RelayByTxResponse
	(*CreateClientRequest)(nil),  // 5: relayer.CreateClientRequest
	(*CreateClientResponse)(nil), // 6: relayer.CreateClientResponse
	(*UpdateClientRequest)(nil),  // 7: relayer.UpdateClientRequest
	(*UpdateClientResponse)(nil), // 8: relayer.UpdateClientResponse
	(*InfoRequest)(nil),          // 9: relayer.InfoRequest
	(*InfoResponse)(nil),         // 10: relayer.InfoResponse
	(*Chain)(nil),                // 11: relayer.Chain
	nil,                          // 12: relayer.CreateClientRequest.ParametersEntry
	nil,                          // 13: relayer.InfoResponse.MetadataEntry
}
var file_relayer_relayer_proto_depIdxs = []int32{
	2,  // 0: relayer.RelayPacketBatch.packets:type_name -> relayer.PacketTransactions
	12, // 1: relayer.CreateClientRequest.parameters:type_name -> relayer.CreateClientRequest.ParametersEntry
	11, // 2: relayer.InfoResponse.target_chain:type_name -> relayer.Chain
	11, // 3: relayer.InfoResponse.source_chain:type_name -> relayer.Chain
	13, // 4: relayer.InfoResponse.metadata:type_name -> relayer.InfoResponse.MetadataEntry
	0,  // 5: relayer.RelayerService.RelayByTx:input_type -> relayer.RelayByTxRequest
	5,  // 6: relayer.RelayerService.CreateClient:input_type -> relayer.CreateClientRequest
	7,  // 7: relayer.RelayerService.UpdateClient:input_type -> relayer.UpdateClientRequest
	9,  // 8: relayer.RelayerService.Info:input_type -> relayer.InfoRequest
	4,  // 9: relayer.RelayerService.RelayByTx:output_type -> relayer.RelayByTxResponse
	6,  // 10: relayer.RelayerService.CreateClient:output_type -> relayer.CreateClientResponse
	8,  // 11: relayer.RelayerService.UpdateClient:output_type -> relayer.UpdateClientResponse
	10, // 12: relayer.RelayerService.Info:output_type -> relayer.InfoResponse
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_relayer_relayer_proto_init() }
func file_relayer_relayer_proto_init() {
	if File_relayer_relayer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_relayer_relayer_proto_rawDesc), len(file_relayer_relayer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_relayer_relayer_proto_goTypes,
		DependencyIndexes: file_relayer_relayer_proto_depIdxs,
		MessageInfos:      file_relayer_relayer_proto_msgTypes,
	}.Build()
	File_relayer_relayer_proto = out.File
	file_relayer_relayer_proto_goTypes = nil
	file_relayer_relayer_proto_depIdxs = nil
}
