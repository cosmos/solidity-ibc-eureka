// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aggregator/aggregator.proto

package aggregator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Attestor_QueryAttestations_FullMethodName = "/aggregator.Attestor/QueryAttestations"
)

// AttestorClient is the client API for Attestor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttestorClient interface {
	// Queries attestations from an attestor.
	QueryAttestations(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*AttestationsResponse, error)
}

type attestorClient struct {
	cc grpc.ClientConnInterface
}

func NewAttestorClient(cc grpc.ClientConnInterface) AttestorClient {
	return &attestorClient{cc}
}

func (c *attestorClient) QueryAttestations(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*AttestationsResponse, error) {
	out := new(AttestationsResponse)
	err := c.cc.Invoke(ctx, Attestor_QueryAttestations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttestorServer is the server API for Attestor service.
// All implementations must embed UnimplementedAttestorServer
// for forward compatibility
type AttestorServer interface {
	// Queries attestations from an attestor.
	QueryAttestations(context.Context, *QueryRequest) (*AttestationsResponse, error)
	mustEmbedUnimplementedAttestorServer()
}

// UnimplementedAttestorServer must be embedded to have forward compatible implementations.
type UnimplementedAttestorServer struct {
}

func (UnimplementedAttestorServer) QueryAttestations(context.Context, *QueryRequest) (*AttestationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAttestations not implemented")
}
func (UnimplementedAttestorServer) mustEmbedUnimplementedAttestorServer() {}

// UnsafeAttestorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttestorServer will
// result in compilation errors.
type UnsafeAttestorServer interface {
	mustEmbedUnimplementedAttestorServer()
}

func RegisterAttestorServer(s grpc.ServiceRegistrar, srv AttestorServer) {
	s.RegisterService(&Attestor_ServiceDesc, srv)
}

func _Attestor_QueryAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestorServer).QueryAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attestor_QueryAttestations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestorServer).QueryAttestations(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Attestor_ServiceDesc is the grpc.ServiceDesc for Attestor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Attestor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggregator.Attestor",
	HandlerType: (*AttestorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAttestations",
			Handler:    _Attestor_QueryAttestations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggregator/aggregator.proto",
}

const (
	Aggregator_GetAggregateAttestation_FullMethodName = "/aggregator.Aggregator/GetAggregateAttestation"
)

// AggregatorClient is the client API for Aggregator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregatorClient interface {
	// Queries the aggregator for an aggregated attestation.
	GetAggregateAttestation(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*AggregateResponse, error)
}

type aggregatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorClient(cc grpc.ClientConnInterface) AggregatorClient {
	return &aggregatorClient{cc}
}

func (c *aggregatorClient) GetAggregateAttestation(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*AggregateResponse, error) {
	out := new(AggregateResponse)
	err := c.cc.Invoke(ctx, Aggregator_GetAggregateAttestation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorServer is the server API for Aggregator service.
// All implementations must embed UnimplementedAggregatorServer
// for forward compatibility
type AggregatorServer interface {
	// Queries the aggregator for an aggregated attestation.
	GetAggregateAttestation(context.Context, *AggregateRequest) (*AggregateResponse, error)
	mustEmbedUnimplementedAggregatorServer()
}

// UnimplementedAggregatorServer must be embedded to have forward compatible implementations.
type UnimplementedAggregatorServer struct {
}

func (UnimplementedAggregatorServer) GetAggregateAttestation(context.Context, *AggregateRequest) (*AggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregateAttestation not implemented")
}
func (UnimplementedAggregatorServer) mustEmbedUnimplementedAggregatorServer() {}

// UnsafeAggregatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregatorServer will
// result in compilation errors.
type UnsafeAggregatorServer interface {
	mustEmbedUnimplementedAggregatorServer()
}

func RegisterAggregatorServer(s grpc.ServiceRegistrar, srv AggregatorServer) {
	s.RegisterService(&Aggregator_ServiceDesc, srv)
}

func _Aggregator_GetAggregateAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).GetAggregateAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aggregator_GetAggregateAttestation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).GetAggregateAttestation(ctx, req.(*AggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Aggregator_ServiceDesc is the grpc.ServiceDesc for Aggregator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aggregator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggregator.Aggregator",
	HandlerType: (*AggregatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAggregateAttestation",
			Handler:    _Aggregator_GetAggregateAttestation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggregator/aggregator.proto",
}
