// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: solana/solana_instruction.proto

package solana

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// `SolanaInstruction` represents a Solana instruction for cross-chain execution
type SolanaInstruction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target Solana program ID (32 bytes)
	ProgramId []byte `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	// ALL accounts that will be accessed during execution
	Accounts []*SolanaAccountMeta `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	// Instruction data
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Optional: Position to inject relayer payer account for rent payment (0-indexed)
	//
	// - If not set: No payer injection (use for programs that don't create accounts)
	// - If set to N: Inject payer at index N in the final account list
	//
	// Example: `payer_position=2` means payer will be at index 2 in the accounts array.
	// The relayer's fee payer will be inserted at this position as a signer.
	PayerPosition *uint32 `protobuf:"varint,4,opt,name=payer_position,json=payerPosition,proto3,oneof" json:"payer_position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolanaInstruction) Reset() {
	*x = SolanaInstruction{}
	mi := &file_solana_solana_instruction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolanaInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaInstruction) ProtoMessage() {}

func (x *SolanaInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_solana_solana_instruction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaInstruction.ProtoReflect.Descriptor instead.
func (*SolanaInstruction) Descriptor() ([]byte, []int) {
	return file_solana_solana_instruction_proto_rawDescGZIP(), []int{0}
}

func (x *SolanaInstruction) GetProgramId() []byte {
	if x != nil {
		return x.ProgramId
	}
	return nil
}

func (x *SolanaInstruction) GetAccounts() []*SolanaAccountMeta {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *SolanaInstruction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SolanaInstruction) GetPayerPosition() uint32 {
	if x != nil && x.PayerPosition != nil {
		return *x.PayerPosition
	}
	return 0
}

// `SolanaAccountMeta` represents account metadata for Solana instructions.
//
// Note: `is_signer` indicates whether the account should be a signer at the CPI instruction level.
// PDAs are marked `is_signer=true` even though they don't sign at the transaction level.
type SolanaAccountMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Account public key (32 bytes)
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// Should this account be a signer in the instruction?
	//
	// For PDAs: true (signs via `invoke_signed` during CPI)
	// For regular accounts: false (doesn't sign)
	IsSigner bool `protobuf:"varint,2,opt,name=is_signer,json=isSigner,proto3" json:"is_signer,omitempty"`
	// Will this account be modified?
	IsWritable    bool `protobuf:"varint,3,opt,name=is_writable,json=isWritable,proto3" json:"is_writable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SolanaAccountMeta) Reset() {
	*x = SolanaAccountMeta{}
	mi := &file_solana_solana_instruction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SolanaAccountMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolanaAccountMeta) ProtoMessage() {}

func (x *SolanaAccountMeta) ProtoReflect() protoreflect.Message {
	mi := &file_solana_solana_instruction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolanaAccountMeta.ProtoReflect.Descriptor instead.
func (*SolanaAccountMeta) Descriptor() ([]byte, []int) {
	return file_solana_solana_instruction_proto_rawDescGZIP(), []int{1}
}

func (x *SolanaAccountMeta) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *SolanaAccountMeta) GetIsSigner() bool {
	if x != nil {
		return x.IsSigner
	}
	return false
}

func (x *SolanaAccountMeta) GetIsWritable() bool {
	if x != nil {
		return x.IsWritable
	}
	return false
}

var File_solana_solana_instruction_proto protoreflect.FileDescriptor

const file_solana_solana_instruction_proto_rawDesc = "" +
	"\n" +
	"\x1fsolana/solana_instruction.proto\x12\x06solana\"\xbc\x01\n" +
	"\x11SolanaInstruction\x12\x1d\n" +
	"\n" +
	"program_id\x18\x01 \x01(\fR\tprogramId\x125\n" +
	"\baccounts\x18\x02 \x03(\v2\x19.solana.SolanaAccountMetaR\baccounts\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x12*\n" +
	"\x0epayer_position\x18\x04 \x01(\rH\x00R\rpayerPosition\x88\x01\x01B\x11\n" +
	"\x0f_payer_position\"i\n" +
	"\x11SolanaAccountMeta\x12\x16\n" +
	"\x06pubkey\x18\x01 \x01(\fR\x06pubkey\x12\x1b\n" +
	"\tis_signer\x18\x02 \x01(\bR\bisSigner\x12\x1f\n" +
	"\vis_writable\x18\x03 \x01(\bR\n" +
	"isWritableBj\n" +
	"\n" +
	"com.solanaB\x16SolanaInstructionProtoP\x01Z\ftypes/solana\xa2\x02\x03SXX\xaa\x02\x06Solana\xca\x02\x06Solana\xe2\x02\x12Solana\\GPBMetadata\xea\x02\x06Solanab\x06proto3"

var (
	file_solana_solana_instruction_proto_rawDescOnce sync.Once
	file_solana_solana_instruction_proto_rawDescData []byte
)

func file_solana_solana_instruction_proto_rawDescGZIP() []byte {
	file_solana_solana_instruction_proto_rawDescOnce.Do(func() {
		file_solana_solana_instruction_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_solana_solana_instruction_proto_rawDesc), len(file_solana_solana_instruction_proto_rawDesc)))
	})
	return file_solana_solana_instruction_proto_rawDescData
}

var file_solana_solana_instruction_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_solana_solana_instruction_proto_goTypes = []any{
	(*SolanaInstruction)(nil), // 0: solana.SolanaInstruction
	(*SolanaAccountMeta)(nil), // 1: solana.SolanaAccountMeta
}
var file_solana_solana_instruction_proto_depIdxs = []int32{
	1, // 0: solana.SolanaInstruction.accounts:type_name -> solana.SolanaAccountMeta
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_solana_solana_instruction_proto_init() }
func file_solana_solana_instruction_proto_init() {
	if File_solana_solana_instruction_proto != nil {
		return
	}
	file_solana_solana_instruction_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_solana_solana_instruction_proto_rawDesc), len(file_solana_solana_instruction_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_solana_solana_instruction_proto_goTypes,
		DependencyIndexes: file_solana_solana_instruction_proto_depIdxs,
		MessageInfos:      file_solana_solana_instruction_proto_msgTypes,
	}.Build()
	File_solana_solana_instruction_proto = out.File
	file_solana_solana_instruction_proto_goTypes = nil
	file_solana_solana_instruction_proto_depIdxs = nil
}
